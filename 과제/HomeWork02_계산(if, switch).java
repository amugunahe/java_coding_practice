package com.test; // 이 코드 덩어리가 속한 폴더(패키지) 이름이다.

/*
  HomeWork02 클래스: **사용자한테 두 수를 입력받아 사칙연산을 존나게 수행하는 간단한 계산기다!**
 
  핵심:
  - **목표:** 사용자한테 첫 번째 수, 연산 기호(+, -, *, /), 두 번째 수를 입력받아서 그 결과를 출력한다.
  - **규칙:**
  - 연산자는 오직 `+`, `-`, `*`, `/`만 된다!
  - 모든 숫자는 소수점 있는 실수(`double`)로 처리한다! (존나 중요!)
  - **`★★0으로 나누면 "0으로 나눌 수 없습니다."라고 존나게 외친다!★★`** (안 그러면 에러난다, 씨발!)
  - **주요 로직:**
  1. `Scanner`로 숫자랑 연산 기호 입력받기.
  2. `switch` 문으로 입력받은 연산 기호에 따라 알맞은 계산을 수행한다.
  3. `printf()` 메소드를 써서 소수점까지 존나게 깔끔하게 결과를 출력한다!
 */

import java.util.*; // 사용자 입력받는 도구 'Scanner'가 들어있는 패키지 통째로 가져오기. (키보드 입력 받을 때 존나 필수다!)

public class HomeWork02 { // 'HomeWork02'라는 이름의 공개(public) 클래스를 선언한다.

	public static void main(String[] args) { // ★★★ 여.기.서.부.터. 프로그램 시작점이다! 무조건 여기부터 봄. ★★★

		Scanner sc = new Scanner(System.in); // 'Scanner' 객체를 만들어서 키보드 입력받을 준비 완료!

		double num1, num2; // 첫 번째, 두 번째 숫자 (소수점 있는 실수 `double` 타입) 저장용 변수.
		char cal;          // 연산 기호 (`+`, `-`, `*`, `/`)를 저장할 문자(`char`) 변수.

		// 1. 첫 번째 숫자(실수) 입력받기
		System.out.print("첫번째 수 입력: "); // 사용자한테 입력하라고 화면에 띄우기.
		num1 = sc.nextDouble(); // 사용자가 키보드로 입력한 실수 값을 'num1'에 저장.

		// 2. 연산 기호 입력받기
		System.out.print("연산기호 입력(+, -, *, /): "); // 연산 기호를 입력하라고 안내.
		// `sc.next()`로 사용자가 입력한 문자열(예: "+")을 읽고, `.charAt(0)`으로 그 문자열의 첫 번째 글자만 가져와서 'cal'에 저장.
		cal = sc.next().charAt(0); 

		// 3. 두 번째 숫자(실수) 입력받기
		System.out.print("두번째수 입력:"); // 사용자한테 두 번째 숫자 입력을 안내.
		num2 = sc.nextDouble(); // 사용자가 입력한 실수 값을 'num2'에 저장.

		// --- ★★★ 존나 중요! 연산 기호에 따라 계산 수행 (Switch 문) ★★★ ---
		// 'switch' 문은 'cal' 변수의 값에 따라 해당하는 'case' 블록으로 이동하여 코드를 실행한다.
		switch (cal) {
		case '+': // 'cal'이 '+'와 같으면
			// `printf()`는 형식을 맞춰서 출력할 때 쓴다! `%f`는 실수를 나타낸다. `%n`은 줄 바꿈.
			System.out.printf("%f + %f = %f%n", num1, num2, num1 + num2); // 덧셈 계산 후 결과를 존나게 출력.
			break; // 현재 'case' 블록의 실행을 종료하고 'switch' 문을 빠져나간다.

		case '-': // 'cal'이 '-'와 같으면
			System.out.printf("%f - %f = %f%n", num1, num2, num1 - num2); // 뺄셈 계산 후 출력.
			break;

		case '*': // 'cal'이 '*'와 같으면
			System.out.printf("%f * %f = %f%n", num1, num2, num1 * num2); // 곱셈 계산 후 출력.
			break;

		case '/': // 'cal'이 '/'와 같으면 (★★★★ 나눗셈은 특히 주의해야 한다! ★★★★)
			// ★★★ 존나 중요! 두 번째 숫자가 0인지 먼저 확인한다! ★★★
			// 0으로 나누는 건 수학적으로 불가능하고, 자바에서도 `ArithmeticException` 같은 오류를 일으킨다!
			if (num2 == 0) { 
				System.out.println("0으로 나눌 수 없습니다."); // 0으로 나누려 하면 에러 메시지를 뱉어라!
			} else { // 0이 아니면 안전하게 나눗셈 계산 후 출력.
				System.out.printf("%f / %f = %f%n", num1, num2, num1 / num2); 
			}
			break; // 여기서 'switch' 문을 탈출.

		default: // 'cal'이 위에 정의된 어떤 'case'에도 해당하지 않으면 (잘못된 연산자 입력)
			System.out.println("잘못된 연산자입니다."); // 잘못된 입력임을 알리는 메시지를 출력한다.
		}

		// 5. 사용했던 자원 깔끔하게 해제
		sc.close(); // 입력 도구 'Scanner' 사용이 끝났으니 시스템 자원 낭비를 막기 위해 깔끔하게 닫아준다.
	}
}
