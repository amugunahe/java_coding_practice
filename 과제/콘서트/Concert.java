package com.homework; // 이 클래스(Concert.java)가 속한 패키지 이름입니다.
                      // 패키지는 관련된 클래스들을 묶어 관리하는 '폴더'와 비슷한 역할을 해요.

import java.util.Scanner; // 사용자 입력을 키보드로부터 받기 위해 자바에서 제공하는 'Scanner' 클래스를 가져옵니다.

/*
  이 'Concert' 클래스는 콘서트 좌석 예약 시스템의 전체적인 흐름을 제어하는 주된 클래스입니다.
  사용자로부터 메뉴를 선택받아 예약, 조회, 취소와 같은 주요 기능을 호출하고 관리합니다.
 
  주요 구성 요소:
  - 콘서트 홀의 이름 (hallName)
  - 사용자 입력을 처리하는 도구 (Scanner 객체)
  - 각 좌석 등급별 좌석들을 관리하는 'Group' 객체들의 배열 (Group[])
 */

public class Concert { // 'Concert'라는 이름의 공개(public) 클래스를 선언합니다.

	// --- 1. 클래스의 속성 (멤버 변수) ---
	// 이 변수들은 'Concert' 객체가 가지는 '상태'를 나타냅니다.
	private String hallName; // 콘서트 홀의 이름을 저장하는 문자열(String) 변수입니다.
	                         // 'private'은 이 변수가 이 클래스 내부에서만 직접 접근 가능하고, 외부에서는 불가능하다는 의미입니다.
	                         // (정보 은닉, 캡슐화의 개념)

	private Scanner sc;      // 사용자로부터 키보드 입력을 받기 위한 'Scanner' 객체 변수입니다.
	                         // 이 변수를 통해 사용자가 입력하는 숫자나 문자열을 읽어올 수 있어요.

	private Group[] group = new Group[3]; // 'Group' 타입의 배열을 선언하고, 그 크기를 3으로 지정합니다.
	                                      // 이 배열은 S, A, B 세 가지 좌석 등급 각각을 관리할 'Group' 객체들을 저장할 공간이에요.
	                                      // 예를 들어, group[0]은 S등급, group[1]은 A등급, group[2]는 B등급을 담당하게 됩니다.

	// --- 2. 생성자(Constructor) ---
	// 'Concert' 클래스의 객체(인스턴스)가 생성될 때 가장 먼저 실행되는 특별한 메소드입니다.
	// 객체가 제대로 작동하기 위한 초기 설정을 담당해요.
	public Concert(String hallName) { // 'Concert' 생성자입니다. 객체를 만들 때 콘서트 홀 이름을 매개변수로 받습니다.
		this.hallName = hallName;     // 매개변수로 받은 'hallName'을 이 객체의 'hallName' 멤버 변수에 저장합니다.
		                              // 'this.'은 현재 객체의 멤버 변수를 지칭할 때 사용해요.
		sc = new Scanner(System.in);  // 'Scanner' 객체를 새로 생성하여 'sc' 변수에 할당합니다.
		                              // 'System.in'은 표준 입력(키보드)을 의미합니다.

		// 각 좌석 등급별 'Group' 객체를 초기화합니다.
		// 'Group' 클래스의 생성자는 아마 좌석 등급 문자(예: 'S')와 해당 등급의 좌석 수(예: 10)를 매개변수로 받을 거예요.
		group[0] = new Group('S', 10); // 'S' 등급 좌석 10개를 관리하는 'Group' 객체를 생성하여 배열의 첫 번째 칸(인덱스 0)에 저장합니다.
		group[1] = new Group('A', 10); // 'A' 등급 좌석 10개를 관리하는 'Group' 객체를 생성하여 배열의 두 번째 칸(인덱스 1)에 저장합니다.
		group[2] = new Group('B', 10); // 'B' 등급 좌석 10개를 관리하는 'Group' 객체를 생성하여 배열의 세 번째 칸(인덱스 2)에 저장합니다.
	}

	// --- 3. 메소드 (콘서트 예약 시스템의 기능) ---

	/*
	  콘서트 좌석 예약 기능을 수행합니다.
	  사용자로부터 좌석 구분을 입력받아 해당 좌석 등급의 예약 메소드를 호출합니다.
	 */
	
	public void reserve() { // 'reserve' 메소드는 외부에서 호출될 수 있도록 'public'으로 선언되었습니다.
		System.out.print("좌석 구분: S(1), A(2), B(3): "); // 사용자에게 좌석 등급 선택지를 화면에 출력합니다.
		int type = sc.nextInt(); // 사용자가 입력한 정수(1, 2, 3 중 하나)를 읽어서 'type' 변수에 저장합니다.

		if (type < 1 || type > 3) { // 만약 'type'이 1보다 작거나 3보다 크면 (즉, 올바르지 않은 좌석 타입이면)
			System.out.println("잘못된 좌석 타입입니다. 다시 입력해주세요."); // 오류 메시지를 출력합니다.
			return; // 이 메소드를 여기서 즉시 종료하고 호출된 곳(run 메소드의 switch 문)으로 돌아갑니다.
		}
		// 'type - 1'을 하는 이유는 배열의 인덱스가 0부터 시작하기 때문입니다.
		// S(1)을 입력하면 group[0]에 접근하고, A(2)를 입력하면 group[1]에 접근하는 식입니다.
		group[type - 1].reserve(); // 사용자가 선택한 좌석 등급에 해당하는 'Group' 객체의 'reserve()' 메소드를 호출하여 실제 예약 처리를 위임합니다.
	}

	/*
	  현재 예약 현황을 조회합니다.
	  모든 좌석 등급의 예약 현황을 순서대로 출력합니다.
	 */
	public void search() { // 'search' 메소드는 외부에서 호출될 수 있습니다.
		for (int i = 0; i < group.length; i++) { // 'group' 배열의 모든 요소(S, A, B 등급)를 반복하여 접근합니다.
			                                     // 'group.length'는 배열의 크기(여기서는 3)를 의미합니다.
			group[i].show(); // 각 'Group' 객체의 'show()' 메소드를 호출하여 해당 등급의 좌석 현황을 화면에 표시합니다.
		}
		System.out.println("<<<<<< 조회를 완료하였습니다. >>>>>>>"); // 모든 조회가 끝났음을 알리는 메시지를 출력합니다.
	}

	/*
	  콘서트 좌석 예약을 취소합니다.
	  사용자로부터 좌석 구분을 입력받아 해당 좌석 등급의 취소 메소드를 호출합니다.
	 */
	public void cancel() { // 'cancel' 메소드는 외부에서 호출될 수 있습니다.
		System.out.print("좌석 구분: S(1), A(2), B(3): "); // 사용자에게 좌석 등급 선택지를 안내합니다.
		int type = sc.nextInt(); // 사용자가 입력한 정수를 'type' 변수에 저장합니다.

		if (type < 1 || type > 3) { // 'type'이 유효한 범위(1~3)를 벗어나면
			System.out.println("잘못된 좌석 타입입니다. 다시 입력해주세요."); // 오류 메시지를 출력합니다.
			return; // 메소드를 여기서 종료합니다.
		}
		group[type - 1].cancel(); // 해당 'Group' 객체의 'cancel()' 메소드를 호출하여 실제 예약을 취소합니다.
	}

	/*
	  콘서트 예약 시스템의 메인 실행 루프입니다.
	  사용자에게 메뉴를 표시하고, 선택에 따라 예약, 조회, 취소 기능을 반복적으로 실행합니다.
	 */
	
	public void run() { // 'run' 메소드는 외부에서 호출될 수 있습니다. (보통 'ConcertApp' 클래스의 main 메소드에서 호출됨)
		System.out.println(hallName + " 예약 시스템입니다."); // 콘서트 홀 이름을 포함한 시작 메시지를 출력합니다.

		int menu = 0; // 사용자 메뉴 선택을 저장할 정수형 변수 'menu'를 0으로 초기화합니다.

		while (menu != 4) { // 이 'while' 반복문은 'menu' 값이 4(종료)가 아닐 동안 계속 실행됩니다.
			// 사용자에게 메뉴 옵션을 출력하여 선택하도록 안내합니다.
			System.out.print("예약: 1, 조회: 2, 취소: 3, 종료: 4 >> ");
			menu = sc.nextInt(); // 사용자가 키보드로 입력한 정수를 읽어서 'menu' 변수에 저장합니다.

			switch (menu) { // 'menu' 변수의 값에 따라 다른 코드를 실행합니다.
				case 1: // 'menu'가 1이면 (사용자가 '예약'을 선택)
					reserve(); // 위에서 정의한 'reserve()' 메소드를 호출하여 예약 기능을 실행합니다.
					break;     // 'switch' 문을 빠져나갑니다. (다음 메뉴 선택으로 넘어갑니다.)
				case 2: // 'menu'가 2이면 (사용자가 '조회'를 선택)
					search(); // 위에서 정의한 'search()' 메소드를 호출하여 조회 기능을 실행합니다.
					break;
				case 3: // 'menu'가 3이면 (사용자가 '취소'를 선택)
					cancel(); // 위에서 정의한 'cancel()' 메소드를 호출하여 취소 기능을 실행합니다.
					break;
				case 4: // 'menu'가 4이면 (사용자가 '종료'를 선택)
					System.out.println("프로그램을 종료합니다."); // 프로그램 종료 메시지를 출력합니다.
					break;     // 'switch' 문을 빠져나갑니다. (이후 while 조건 'menu != 4'가 거짓이 되어 반복문이 종료됩니다.)
				default: // 'menu'가 1, 2, 3, 4 중 어느 것도 아니면 (사용자가 잘못된 숫자를 입력했을 때)
					System.out.println("잘못 입력하셨습니다. 메뉴를 다시 선택해주세요."); // 잘못된 입력 메시지를 출력합니다.
			}
		}
	}
}
