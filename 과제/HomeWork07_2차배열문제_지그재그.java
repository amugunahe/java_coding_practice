package com.test; // 이 코드가 속한 패키지(폴더) 이름이다.

/*
  HomeWork07 클래스: **2차원 배열에 '지그재그' 또는 '뱀' 모양으로 숫자를 존나게 채워 넣고 출력하는 예제다!**
 
  핵심:
  - **문제:** 다음 패턴대로 숫자를 출력한다:
  1  2  3  4  5
  10 9  8  7  6
  11 12 13 14 15
  20 19 18 17 16
  - **'지그재그' 채우기:** 짝수 번째 행(0, 2, ...)은 왼쪽에서 오른쪽으로 숫자가 증가하고,
  홀수 번째 행(1, 3, ...)은 오른쪽에서 왼쪽으로 숫자가 감소한다! (존나게 독특한 패턴!)
  - **배열 크기:** 4행 5열짜리 2차원 배열을 사용한다.
  - **`i % 2 == 0`:** 행 인덱스 `i`가 짝수인지 홀수인지 판단할 때 쓰는 존나 유용한 조건식이다!
  - **`n++`:** 숫자를 하나씩 증가시키면서 배열에 차곡차곡 넣어준다! (방향만 바뀔 뿐 숫자는 계속 증가!)
 */

public class HomeWork07 { // 'HomeWork07'이라는 이름의 클래스를 정의한다.

	public static void main(String[] args) { // ★★★ 프로그램의 시작점! ★★★
		// 이 `main` 메소드 안의 코드가 프로그램이 실행될 때 가장 먼저 동작한다.

		// 1. 2차원 배열 선언 및 생성
		// 4행 5열 크기의 2차원 정수 배열을 만든다.
		// 모든 칸은 기본값인 0으로 초기화된다.
		int[][] arr = new int[4][5];

		// 2. 배열에 값을 채우기 위한 숫자 변수 초기화
		int n = 1; // 배열에 1부터 순서대로 채워 넣을 숫자를 저장하는 변수다. (얘는 계속 증가만 한다!)

		// 3. 배열에 값 저장 (★ 핵심 로직: 지그재그 채우기! ★)
		// 바깥쪽 `for` 루프: 배열의 각 행(`i`)을 순회한다. (i=0부터 i=3까지, 즉 4번 반복!)
		for (int i = 0; i < arr.length; i++) {
			
			// ★★★ 존나 중요! 현재 행의 인덱스 'i'가 짝수인지 홀수인지 확인하여 채우는 방향을 결정한다! ★★★
			// `i % 2 == 0`은 'i'를 2로 나누었을 때 나머지가 0이면 짝수라는 의미다. (0, 2번째 행)
			if (i % 2 == 0) { // 현재 행이 짝수 번째 행(0, 2)인 경우: 왼쪽에서 오른쪽으로 채운다 (오름차순).
				// 내부 루프: 열(`j`)을 0부터 마지막까지(j=0부터 j=4까지) 순서대로 반복한다.
				for (int j = 0; j < arr[i].length; j++) {
					arr[i][j] = n++; // `n`의 현재 값을 배열 요소에 할당한 다음, `n`을 1 증가시킨다.
				}
			} else { // 현재 행이 홀수 번째 행(1, 3)인 경우: 오른쪽에서 왼쪽으로 채운다 (내림차순).
				// 내부 루프: 열(`j`)을 마지막부터 0까지(j=4부터 j=0까지) 역순으로 반복한다.
				// `arr[i].length - 1`은 현재 행의 마지막 열 인덱스다. (여기선 4)
				for (int j = arr[i].length - 1; j >= 0; j--) {
					arr[i][j] = n++; // `n`의 현재 값을 배열 요소에 할당한 다음, `n`을 1 증가시킨다.
                                     // (숫자 `n` 자체는 계속 증가하지만, 배열에 저장되는 위치가 역순이 된다!)
				}
			}
		}
	
		// 4. 배열에 저장된 값 출력! (실제로 화면에 패턴을 보여주는 부분!)
		// 바깥쪽 `for` 루프: 배열의 각 행(`i`)을 순회하며 출력할 줄을 제어한다.
		for (int i = 0; i < arr.length; i++) {
			// 안쪽 `for` 루프: 현재 행(`arr[i]`)의 각 열(`j`)을 순회하며 값을 출력한다.
			for (int j = 0; j < arr[i].length; j++) {
				// 현재 배열 요소를 출력하고 탭(`\t`)으로 간격을 둔다.
				// 탭은 각 숫자가 일정한 간격으로 정렬되어 보기 좋게 만들어준다.
				System.out.print(arr[i][j] + "\t");
			}
			System.out.println(); // 한 행의 모든 숫자를 출력한 후, 다음 행을 위해 줄을 바꾼다. (깔끔하게!)
		}
	}
}
