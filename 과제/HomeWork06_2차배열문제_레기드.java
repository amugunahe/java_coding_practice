package com.test; // 이 코드가 속한 패키지(폴더) 이름이다.

/*
  HomeWork06 클래스: **2차원 '가변 배열'을 활용해서 존나 예쁜 삼각형 숫자 패턴을 출력하는 예제다!**
 
  핵심:
  - **문제:** 다음 패턴대로 숫자를 출력한다:
  1
  2  3
  4  5  6
  7  8  9  10
  - **'삼각형' 채우기:** 각 행(row)의 길이가 1, 2, 3, 4로 점차 존나게 늘어나는 특징이 있다!
  - **가변 배열(Ragged Array) 활용:** 행의 개수만 정하고, 각 행의 열 길이는 나중에 다르게 정한다!
  - **`int[][] arr = new int[4][];`:** 4개의 행을 가진 2차원 배열인데, 각 행의 열 크기는 아직 미정이다!
  - **`arr[i] = new int[i + 1];`:** 이 코드가 존나 핵심이다!
  - `i`가 0일 때 (첫 번째 행): `new int[0 + 1]` -> 1칸짜리 배열!
  - `i`가 1일 때 (두 번째 행): `new int[1 + 1]` -> 2칸짜리 배열!
  - 이렇게 각 행마다 열의 길이를 존나게 다르게 설정할 수 있다!
  - **`n++`:** 숫자를 1부터 순서대로 증가시키면서 배열에 차곡차곡 넣어준다!
  - **중첩 `for` 문:** 바깥쪽은 행, 안쪽은 열을 돌면서 배열에 숫자를 채워 넣고 출력한다!
 */

public class HomeWork06 { // 'HomeWork06'이라는 이름의 클래스를 정의한다.

	public static void main(String[] args) { // ★★★ 프로그램의 시작점! ★★★
		// 이 `main` 메소드 안의 코드가 프로그램이 실행될 때 가장 먼저 동작한다.

		// 1. 2차원 배열 선언 및 초기화 (가변 배열!)
		// `int[][] arr = new int[4][];`
		// - 4개의 행(row)을 가진 2차원 배열을 선언한다.
		// - 하지만 각 행의 열(column) 길이는 아직 정해지지 않았다! (`[]` 부분이 비어있지?)
		// - 이렇게 각 행의 길이가 다른 배열을 '가변 배열' 또는 '비정방형 배열'이라고 존나게 부른다!
		int[][] arr = new int[4][];

		// 2. 배열에 값을 채우기 위한 숫자 변수 초기화
		int n = 1; // 배열에 1부터 순서대로 채워 넣을 숫자를 저장하는 변수다.

		// 3. 배열에 값 저장 (★ 핵심 로직: 삼각형 모양 채우기! ★)
		// 바깥쪽 `for` 루프: 배열의 각 행(`i`)을 순회한다. (0부터 `arr.length - 1`까지, 즉 0, 1, 2, 3)
		for (int i = 0; i < arr.length; i++) {
			// ★★★ 존나 중요! 각 행(`i`)마다 열의 길이를 다르게 지정한다! ★★★
			// 문제의 출력 형태(1, 2, 3, 4)를 만들려면, 현재 행 인덱스 `i`에 1을 더한 값을 사용한다.
			// - `i`가 0일 때: `arr[0] = new int[0 + 1];` 즉, 길이 1짜리 배열 생성!
			// - `i`가 1일 때: `arr[1] = new int[1 + 1];` 즉, 길이 2짜리 배열 생성!
			// - `i`가 2일 때: `arr[2] = new int[2 + 1];` 즉, 길이 3짜리 배열 생성!
			// - `i`가 3일 때: `arr[3] = new int[3 + 1];` 즉, 길이 4짜리 배열 생성!
			arr[i] = new int[i + 1];

			// 안쪽 `for` 루프: 현재 행(`arr[i]`)의 각 열(`j`)을 제어하며 값을 채운다.
			for (int j = 0; j < arr[i].length; j++) {
				arr[i][j] = n++; // `n`의 현재 값을 배열 요소에 할당한 다음, `n`을 1 증가시킨다! (존나 똑똑함!)
			}
		}

		// 4. 배열에 저장된 값 출력! (실제로 화면에 패턴을 보여주는 부분!)
		// 바깥쪽 `for` 루프: 배열의 각 행(`i`)을 순회하며 출력할 줄을 제어한다.
		for (int i = 0; i < arr.length; i++) {
			// 안쪽 `for` 루프: 현재 행(`arr[i]`)의 각 열(`j`)을 순회하며 값을 출력한다.
			for (int j = 0; j < arr[i].length; j++) {
				// 현재 배열 요소를 출력하고 탭(`\t`)으로 간격을 둔다.
				// 탭은 각 숫자가 일정한 간격으로 정렬되어 보기 좋게 만들어준다.
				System.out.print(arr[i][j] + "\t");
			}
			System.out.println(); // 한 행의 모든 숫자를 출력한 후, 다음 행을 위해 줄을 바꾼다. (깔끔하게!)
		}
	}
}
