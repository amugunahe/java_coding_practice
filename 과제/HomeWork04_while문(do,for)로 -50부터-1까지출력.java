package com.test; // 이 코드가 속한 패키지 이름입니다.

/*
  [문제 1]
  -50에서 1까지의 정수를 출력하는 프로그램을 작성합니다.
  이때, 한 줄에는 5개의 수만을 출력하고, 수들 사이를 탭 간격만큼 띄웁니다.
 */

public class HomeWork04 { // 'HomeWork04'라는 이름의 클래스를 정의합니다.

	public static void main(String[] args) { // ★★★ 프로그램의 시작점 ★★★
		// 이 `main` 메서드 안의 코드가 프로그램이 실행될 때 가장 먼저 동작합니다.

		// 1. 시작 숫자 설정
		int i = -50; // 정수형 변수 'i'를 선언하고, 숫자를 -50부터 시작하기 위해 -50으로 초기화합니다.

		// 2. 숫자 출력 루프 (while문)
		// `while (i <= 1)`: 이 루프는 'i'의 값이 1보다 작거나 같을 동안 계속 반복됩니다.
		// 즉, 'i'가 -50부터 시작하여 1이 될 때까지 숫자를 출력하고 처리합니다.
		while (i <= 1) {
			// 현재 'i'의 값을 출력합니다.
			// `printf("\t%d\t", i)`:
			// - `\t`: 숫자 앞에 탭 간격을 둡니다. 이는 출력 결과에서 숫자들 간의 간격을 일정하게 유지하는 데 도움을 줍니다.
			// - `%d`: 정수형 변수 `i`의 값을 이 위치에 출력하라는 형식 지정자입니다.
			// - `\t`: 숫자 뒤에도 탭 간격을 둡니다.
			System.out.printf("\t%d\t", i);

			// 3. 다음 숫자로 이동
			i++; // 'i'의 값을 1 증가시킵니다. 다음 반복에서는 1 증가된 숫자가 처리됩니다.

			// 4. 5개마다 줄바꿈 조건 확인 (★ 핵심 로직 ★)
			// 'i'의 값이 (현재 출력된 숫자의 다음 값)이 5의 배수인지 확인합니다.
			// 예를 들어, -46을 출력한 후 `i`는 -45가 되는데, -45는 5의 배수이므로 줄바꿈이 일어납니다.
			// 이렇게 하면 항상 5개의 숫자가 한 줄에 출력됩니다.
			// 단, 마지막 줄은 숫자가 5개가 안 될 수도 있으므로, 이 조건은 유연하게 작동합니다.
			if (i % 5 == 0) {
				System.out.println(); // 현재 줄을 끝내고 새로운 줄로 이동합니다.
			}
		}
		// (루프가 끝나면 'i'가 1보다 커지므로 프로그램이 자연스럽게 종료됩니다.)
	}
}

		/*
		  do~while 문
		  do { System.out.printf("\t%d\t", i); i++;
		  if (i % 5 == 0) System.out.println(); }while(i<=1);
		 
		  for문
		  for(;i<=1;){ if (i % 5 == 0) System.out.println(); }
		 */

	}

}
