package com.test; // 이 코드가 속한 패키지 이름입니다.

/*
  [문제 3]
  다음과 같은 형태로 숫자를 출력하는 프로그램을 구현합니다.
 
  20 16 12  8  4
  19 15 11  7  3
  18 14 10  6  2
  17 13  9  5  1
 
  이 패턴은 오른쪽으로 갈수록 4씩 감소하고, 아래로 갈수록 1씩 감소하는 특징을 가집니다.
  마치 거꾸로 된 '열 우선' 채우기처럼 보입니다.
 */

public class HomeWork08 { // 'HomeWork08'이라는 이름의 클래스를 정의합니다.

	public static void main(String[] args) { // ★★★ 프로그램의 시작점 ★★★
		// 이 `main` 메서드 안의 코드가 프로그램이 실행될 때 가장 먼저 동작합니다.

		// 1. 배열의 행과 열 크기 설정
		int cnt_i = 4; // 배열의 행(row) 개수를 4로 설정합니다. (cnt_i = count_row)
		int cnt_j = 5; // 배열의 열(column) 개수를 5로 설정합니다. (cnt_j = count_column)

		// 2. 2차원 배열 선언 및 생성
		// `int[cnt_i][cnt_j]`는 4행 5열 크기의 2차원 정수 배열을 만듭니다.
		// 모든 칸은 기본값인 0으로 초기화됩니다.
		int[][] arr = new int[cnt_i][cnt_j];

		// 3. 배열에 값 저장 (★ 핵심 로직 ★)
		// 바깥쪽 `for` 루프: 배열의 각 행(i)을 순회합니다. (0부터 3까지)
		for (int i = 0; i < arr.length; i++) {
			// 안쪽 `for` 루프: 현재 행(arr[i])의 각 열(j)을 순회합니다. (0부터 4까지)
			for (int j = 0; j < arr[i].length; j++) {

				// 숫자를 채우는 규칙:
				// 이 패턴은 가장 큰 숫자(20)에서 시작하여 특정 규칙에 따라 감소합니다.
				// 숫자가 감소하는 규칙을 찾아야 합니다.
				//
				// `(cnt_i * cnt_j - i)`:
				// - `cnt_i * cnt_j`는 배열의 총 요소 개수(4 * 5 = 20)입니다.
				// - 여기에 현재 행 인덱스 `i`를 빼줍니다.
				//   예: i=0일 때 (20-0)=20, i=1일 때 (20-1)=19, i=2일 때 (20-2)=18, i=3일 때 (20-3)=17
				//   이 값은 각 행의 첫 번째 열(`j=0`)에 들어갈 숫자를 결정합니다. (20, 19, 18, 17)
				//
				// `(cnt_i * j)`:
				// - `cnt_i`(행의 개수, 여기선 4)에 현재 열 인덱스 `j`를 곱합니다.
				// - 이 값은 열이 바뀔 때마다 총 합에서 빼줄 값입니다.
				//   예: j=0일 때 (4*0)=0, j=1일 때 (4*1)=4, j=2일 때 (4*2)=8 ...
				//   이는 각 열로 이동할 때마다 4씩 감소하는 패턴을 만듭니다.
				//
				// **최종 수식:** `(cnt_i * cnt_j - i) - (cnt_i * j)`
				// 예시 검증:
				// arr[0][0] = (4 * 5 - 0) - (4 * 0) = 20 - 0 = 20
				// arr[1][0] = (4 * 5 - 1) - (4 * 0) = 19 - 0 = 19
				// arr[0][1] = (4 * 5 - 0) - (4 * 1) = 20 - 4 = 16
				// arr[3][4] = (4 * 5 - 3) - (4 * 4) = (20 - 3) - 16 = 17 - 16 = 1
				// 이 수식은 문제에서 요구하는 패턴을 정확하게 생성합니다!
				arr[i][j] = (cnt_i * cnt_j - i) - (cnt_i * j);
			}
		}

		// 4. 배열에 저장된 값 출력
		// 바깥쪽 `for` 루프: 배열의 각 행(i)을 순회하며 출력할 줄을 제어합니다.
		for (int i = 0; i < arr.length; i++) {
			// 안쪽 `for` 루프: 현재 행(arr[i])의 각 열(j)을 순회하며 값을 출력합니다.
			for (int j = 0; j < arr[i].length; j++) {
				// 현재 값을 출력하고 탭(`\t`)으로 간격을 둡니다.
				// 탭은 각 숫자가 일정한 간격으로 정렬되어 보기 좋게 만들어줍니다.
				System.out.print(arr[i][j] + "\t");
			}
			System.out.println(); // 한 행의 모든 숫자를 출력한 후, 다음 행을 위해 줄을 바꿉니다.
		}
	}
}

/* 내가 쓴 답]	
 
int num = 20;
 
int[][] arr = new int[4][5];

for (int j = 0; j < arr[0].length; j++) {
	for (int i = 0; i < arr.length; i++) {
				arr[i][j] = num--;
			}
		}
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.println();
		}
	}
}
*/
