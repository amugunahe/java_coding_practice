package com.test; // 이 코드가 속한 패키지(폴더) 이름이다.

/*
  HomeWork09 클래스: **2차원 배열에 '열 우선'으로 숫자를 존나게 채워 넣고 출력하는 예제다!**
 
  핵심:
  - **문제:** 다음 패턴대로 숫자를 출력한다:
  1  5  9  13 17
  2  6 10 14 18
  3  7 11 15 19
  4  8 12 16 20
  - **'열 우선' 채우기:** 숫자가 1열(세로)부터 1, 2, 3, 4로 채워지고, 그 다음 2열이 5, 6, 7, 8로 채워지는 식이다.
  - **배열 크기:** 4행 5열짜리 2차원 배열을 사용한다.
  - **값 채우는 핵심 수식:** `(j * cnt_i) + (i + 1)`
  - `j * cnt_i`: 현재 열의 위치에 따라 숫자를 행의 개수만큼 존나게 점프시킨다.
  - `i + 1`: 현재 행의 위치에 따라 숫자를 1부터 행의 개수까지 증가시킨다.
  - **중첩 `for` 문:** 바깥쪽은 행, 안쪽은 열을 돌면서 배열에 숫자를 채워 넣고 출력한다!
 */

public class HomeWork09 { // 'HomeWork09'라는 이름의 클래스를 정의한다.

	public static void main(String[] args) { // ★★★ 프로그램의 시작점! ★★★
		// 이 `main` 메소드 안의 코드가 프로그램이 실행될 때 가장 먼저 동작한다.

		// 1. 배열의 행과 열 크기 설정
		int cnt_i = 4; // 배열의 행(row) 개수를 4로 설정한다. (cnt_i = count_row)
		int cnt_j = 5; // 배열의 열(column) 개수를 5로 설정한다. (cnt_j = count_column)

		// 2. 2차원 배열 선언 및 생성
		// `int[cnt_i][cnt_j]`는 4행 5열 크기의 2차원 정수 배열을 만든다.
		// 모든 칸은 기본값인 0으로 초기화된다.
		int[][] arr = new int[cnt_i][cnt_j];

		// 3. 배열에 값 저장 (★ 핵심 로직: 열 우선 채우기! ★)
		// 바깥쪽 `for` 루프: 배열의 각 행(`i`)을 순회한다. (0부터 3까지)
		for (int i = 0; i < arr.length; i++) {
			// 안쪽 `for` 루프: 현재 행(`arr[i]`)의 각 열(`j`)을 순회한다. (0부터 4까지)
			for (int j = 0; j < arr[i].length; j++) {

				// ★★★ 숫자를 채우는 핵심 규칙: 열 우선 패턴을 위한 수식! ★★★
				// 이 패턴은 열(세로) 방향으로 숫자가 채워지고, 다음 열로 넘어갈 때마다
				// 숫자가 행의 개수(`cnt_i`)만큼 존나게 점프하는 특징을 가진다.
				//
				// **올바른 수식:** `(j * cnt_i) + (i + 1)`
				// - `(j * cnt_i)`: 현재 열의 위치에 따라 숫자를 점프시킨다.
				//   예: j=0일 때 0, j=1일 때 4, j=2일 때 8 ... (열이 바뀔 때마다 행의 개수(4)만큼 숫자가 증가)
				// - `(i + 1)`: 현재 행의 위치에 따라 숫자를 1부터 4까지 증가시킨다. (행이 바뀔 때마다 1씩 증가)
				//
				// 이 두 값을 더하면 원하는 패턴의 숫자가 정확하게 생성된다! (존나 똑똑함!)
				// 예시:
				// arr[0][0] = (0 * 4) + (0 + 1) = 0 + 1 = 1
				// arr[1][0] = (0 * 4) + (1 + 1) = 0 + 2 = 2
				// arr[0][1] = (1 * 4) + (0 + 1) = 4 + 1 = 5
				// arr[3][4] = (4 * 4) + (3 + 1) = 16 + 4 = 20
				arr[i][j] = (j * cnt_i) + (i + 1);
			}
		}

		// 4. 배열에 저장된 값 출력! (실제로 화면에 패턴을 보여주는 부분!)
		// 바깥쪽 `for` 루프: 배열의 각 행(`i`)을 순회하며 출력할 줄을 제어한다.
		for (int i = 0; i < arr.length; i++) {
			// 안쪽 `for` 루프: 현재 행(`arr[i]`)의 각 열(`j`)을 순회하며 값을 출력한다.
			for (int j = 0; j < arr[i].length; j++) {
				// 현재 값을 출력하고 탭(`\t`)으로 간격을 둔다.
				// 탭은 각 숫자가 일정한 간격으로 정렬되어 보기 좋게 만들어준다.
				System.out.print(arr[i][j] + "\t");
			}
			System.out.println(); // 한 행의 모든 숫자를 출력한 후, 다음 행을 위해 줄을 바꾼다. (깔끔하게!)
		}
	}
}

/*
 * (니가 직접 짠 답! 이것도 존나 올바른 코드다, 씨발!
 * for문의 순서를 바꿔서 열 우선으로 채웠다는 점이 아주 똑똑하다!)
 *
 * int num = 1;
 *
 * int[][] arr = new int[4][5];
 *
 * for (int j = 0; j < arr[0].length; j++) { // 바깥쪽 for문이 열을 담당!
 * for (int i = 0; i < arr.length; i++) {   // 안쪽 for문이 행을 담당!
 * arr[i][j] = num++;
 * }
 * }
 *
 * for (int i = 0; i < arr.length; i++) {
 * for (int j = 0; j < arr[i].length; j++) {
 * System.out.print(arr[i][j] + " ");
 * }
 * System.out.println();
 * }
 * }
 */
