package com.inher; // 이 코드가 속한 패키지 이름입니다.

/*
  ★ 오버라이딩 (Overriding) 조건 ★
 - 자식 클래스에서 부모 클래스의 메서드와 '이름', '매개변수', '반환 타입'이 모두 같아야 합니다.
 - 오버라이딩은 부모로부터 물려받은 메서드의 내용을 자식 클래스에 맞게 '재정의'하는 것을 의미합니다.
 
  1. 이름이 같아야 한다. (메서드 이름)
  2. 매개변수가 같아야 한다. (메서드 괄호 안의 타입과 개수)
  3. 반환타입이 같아야 한다. (메서드 이름 앞의 타입, 예: void, String, int 등)
  (추가 조건: 접근 제어자(public, protected 등)는 부모 메서드보다 같거나 넓은 범위여야 합니다.)
  (추가 조건: 예외(throws)는 부모 메서드와 같거나 좁은 범위여야 합니다.)
 */

public class Point3D extends Point { // 'Point3D' 클래스는 'Point' 클래스를 '상속(extends)'받습니다.
	// 이제 Point3D는 Point가 가지고 있던 모든 변수(x, y)와 메서드를 물려받게 됩니다.

	int z; // Point3D 클래스에 새롭게 추가된 멤버 변수입니다. 3차원 점의 z 좌표를 저장합니다.

	// --- 생성자 (Constructor) ---

	// 1. 기본 생성자: x, y, z 좌표를 모두 특정 기본값(100, 200, 300)으로 초기화하는 점을 만듭니다.
	public Point3D() {
		this(100, 200, 300); // ★ 중요: 이 코드는 바로 아래에 있는 다른 생성자 `Point3D(int x, int y, int z)`를 호출합니다.
								// 즉, 이 생성자를 호출하면 자동으로 `Point3D(100, 200, 300)`이 호출되어
								// 현재 3차원 점의 x, y, z 좌표를 100, 200, 300으로 설정해 줍니다.
	}

	// 2. x, y, z 좌표를 받아서 3차원 점을 만드는 생성자
	public Point3D(int x, int y, int z) {

		super(x, y); // ★★★ 중요 ★★★
						// 'super(x, y)'는 'Point' 클래스(부모 클래스)의 생성자를 호출하는 것입니다.
						// 이 코드를 통해 부모 클래스의 `x`와 `y` 변수를 입력받은 `x`, `y` 값으로 초기화합니다.
						// (참고: 자식 클래스의 생성자가 호출될 때는 항상 부모 클래스의 생성자가 먼저 호출되어야 합니다.
						// 만약 `super()`를 명시하지 않으면, 자바가 자동으로 `super()` (부모의 기본 생성자)를 호출합니다.)

		this.z = z; // 입력받은 'z' 값을 현재 이 Point3D 객체의 'z' 변수에 저장합니다.
					// 'this.z'는 "현재 객체(내가 만든 3차원 점)의 z"를 의미해요.
	}

	// --- 메서드 (Method) ---

	@Override // ★★★ 중요 ★★★ 이 어노테이션은 "아래 메서드가 부모 클래스의 메서드를 재정의(Override)한 것이다"라고 알려줍니다.
	String getLocation() { // 부모 클래스인 Point에 있던 `getLocation()` 메서드를 재정의(오버라이딩)합니다.
							// 이제 Point3D 객체에서 `getLocation()`을 호출하면, 이 메서드가 실행됩니다.
		return "x: " + x + ", y: " + y + ", z:" + z; // 2차원 점에서는 x, y만 보여줬지만, 3차원 점에서는 z까지 추가하여 반환합니다.
	}

	@Override // `toString()` 메서드는 Java의 `Object` 클래스(모든 클래스의 최상위 부모)에 정의되어 있는 메서드입니다.
				// 보통 객체의 정보를 문자열로 표현할 때 이 메서드를 오버라이딩해서 사용합니다.
	public String toString() { // 이 메서드를 오버라이딩하여 Point3D 객체의 정보를 문자열로 반환하도록 합니다.
		return "x: " + x + ", y: " + y + ", z:" + z; // 객체를 `System.out.println()` 등으로 출력할 때, 이 문자열이 나타납니다.
	}

}
