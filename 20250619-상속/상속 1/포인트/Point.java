package com.inher; // 이 코드가 속한 패키지(폴더) 이름이다. (전에 DeckTest랑 같은 곳에 있다!)

/*
  Point 클래스: **2차원 평면 위의 '점(Point)'을 존나게 표현하는 설계도다!**
 
  핵심:
  - **`x`, `y` 필드:** 점의 가로(`x`) 좌표랑 세로(`y`) 좌표를 저장하는 변수다. (각 점 객체마다 자기만의 x, y 값을 가진다!)
  - **생성자 2개:**
  1. **`Point(int x, int y)`:** x, y 좌표를 입력받아서 바로 점을 만드는 존나 편한 생성자다.
  - **`this.x = x;`**: 여기서 `this.`는 현재 객체의 멤버 변수를 의미한다! (매개변수랑 이름 같을 때 존나 중요!)
  2. **`Point()` (기본 생성자):** 아무 매개변수 없이 객체만 만들 때 쓴다. (이때 점은 (0,0)으로 초기화된다!)
  - **`this(0, 0);`**: ★★★ 존나 중요! 이 새끼는 **다른 생성자(`Point(int x, int y)`)를 호출하는 거다!**
  - 이렇게 하면 코드 중복을 피하고 존나게 깔끔하게 객체를 만들 수 있다!
  - **`getXY()` 메소드:** 점의 좌표를 "(x,y)" 형태로 문자열로 돌려준다!
  - **`getLocation()` 메소드:** 점의 좌표를 "x: x값, y: y값" 형태로 문자열로 돌려준다! (좀 더 자세하게!)
 */

public class Point { // 'Point'라는 이름의 공개(public) 클래스를 정의한다. 이 클래스는 점(Point) 객체를 만들 때 사용하는 '설계도'다.

	// --- 멤버 변수 (필드) ---
	// 이 변수들은 'Point' 클래스로 만들어지는 각각의 객체가 가질 점의 좌표들을 저장하는 공간이다.
	int x; // 점의 x 좌표를 저장할 정수(int) 변수.
	int y; // 점의 y 좌표를 저장할 정수(int) 변수.

	// --- 생성자(Constructor) #1: x, y 좌표를 받아서 점을 만드는 존나 편한 생성자! ---
	// 이 생성자는 'Point' 객체를 생성할 때 x, y 좌표 값을 외부로부터 받아 멤버 변수들을 초기화한다.
	public Point(int x, int y) { // 'x'랑 'y' 두 개의 정수 값을 매개변수로 입력받는다.
		this.x = x; // 매개변수 'x'의 값을 현재 객체의 'x' 멤버 변수에 저장한다. ('this.'는 현재 객체 자신을 지칭! 존나 중요!)
		this.y = y; // 매개변수 'y'의 값을 현재 객체의 'y' 멤버 변수에 저장한다.
	}

	// --- 생성자(Constructor) #2: 기본 생성자 (매개변수 없음) ---
	// 이 생성자는 객체를 생성할 때 초기값을 지정하지 않고, x, y 좌표를 모두 0으로 초기화하는 데 사용한다.
	public Point() { // 아무 매개변수도 입력받지 않는 기본 생성자다.
		// ★★★ 존나 중요! 'this(0, 0);'는 위에 정의된 'Point(int x, int y)' 생성자를 호출하는 거다! ★★★
		// 이렇게 하면 x, y가 자동으로 0으로 설정된다. (코드 중복을 피하고 존나게 깔끔하다!)
		this(0, 0); 
	}

	// --- 메소드 ---
	// 'Point' 객체가 할 수 있는 동작이나 기능을 정의한다.

	// 점의 x, y 좌표를 "(x,y)" 형태의 문자열로 반환하는 메소드.
	String getXY() {
		// 문자열 연결(`+` 연산자)을 사용해서 "()" 안에 x, y 값을 넣은 문자열을 만든다.
		return "(" + x + "," + y + ")"; // 예: x가 3, y가 5면 "(3,5)"를 돌려준다.
	}
	
	// 점의 x, y 좌표를 "x: x값, y: y값" 형태의 문자열로 반환하는 메소드. (좀 더 자세한 정보!)
	String getLocation() {
		// 문자열 연결을 사용해서 "x: 값, y:값" 형태의 문자열을 만든다.
		return "x: " + x + ",y:" + y; // 예: x가 3, y가 5면 "x: 3,y:5"를 돌려준다.
	}

    // ★★★ 실행 예시 (`main` 메소드 추가): 이 코드를 어떻게 돌리는지 보여준다! ★★★
    public static void main(String[] args) {
        // Point 객체 #1: (3, 5)로 초기화된 점 생성
        Point p1 = new Point(3, 5);
        System.out.println("점 p1의 좌표 (getXY): " + p1.getXY()); // (3,5) 출력
        System.out.println("점 p1의 위치 (getLocation): " + p1.getLocation()); // x: 3,y:5 출력

        // Point 객체 #2: 기본 생성자로 (0, 0)으로 초기화된 점 생성
        Point p2 = new Point();
        System.out.println("점 p2의 좌표 (getXY): " + p2.getXY()); // (0,0) 출력
        System.out.println("점 p2의 위치 (getLocation): " + p2.getLocation()); // x: 0,y:0 출력

        // Point 객체 #3: 좌표 변경 (메소드를 통해 직접 변경은 안 되고, 필드에 직접 접근하거나 새로운 메소드 만들어야 함)
        p1.x = 10; // 직접 x 좌표 변경 (private이 아니므로 가능)
        p1.y = 20; // 직접 y 좌표 변경
        System.out.println("점 p1의 새로운 좌표 (변경 후): " + p1.getXY()); // (10,20) 출력
    }
}
