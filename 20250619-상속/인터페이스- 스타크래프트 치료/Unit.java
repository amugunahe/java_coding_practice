package com.interexam; // 이 코드가 속한 패키지 이름이다.

/*
  Unit 클래스: **모든 게임 유닛들의 존나게 중요한 '추상' 부모 설계도다!**
 
  핵심:
  - **`public abstract class`로 선언했다!** (원래 `interface`였는데, 유닛 '체력(hitPoint)' 같은 개체별 속성을 가지려면 '클래스'여야 한다, 씨발!)
  - **`hitPoint` (체력)**이랑 **`MAX_HP` (최대 체력)** 같은 유닛 공통 속성을 가진다.
  - **생성자를 가질 수 있다!** 이 새끼는 객체를 만들 때 `MAX_HP`를 초기화하는 데 쓴다!
  - **이 클래스 자체는 '추상'이라 지 혼자서는 객체를 못 만든다!** (무조건 다른 자식 클래스들이 상속받아서 구체화해야 한다!)
 */

public abstract class Unit { // 'Unit'이라는 추상 클래스다! (★★수정됨: abstract class로 변경★★)

	// --- 멤버 변수 (인스턴스 속성) ---
	// 이 변수들은 'Unit'을 상속받는 각각의 유닛 객체들이 자기만의 값을 가질 수 있다!
	int hitPoint; // 유닛의 현재 체력. (각 유닛마다 다르다!)
	final int MAX_HP; // 유닛의 최대 체력. (한번 정해지면 바뀌지 않는다!)
	
	// --- 생성자 (Constructor) ---
	// ★★★ 존나 중요! '추상 클래스'는 생성자를 가질 수 있다! ★★★
	// 이 생성자는 'Unit'을 상속받는 자식 클래스가 객체를 만들 때 호출되어서,
	// 'MAX_HP' 값을 초기화해준다!
	public Unit(int hp) { // 'hp'라는 매개변수를 받아서 최대 체력을 설정한다.
		this.MAX_HP = hp; // 매개변수 'hp'로 'MAX_HP' 멤버 변수를 초기화한다.
		this.hitPoint = hp; // 보통 처음에는 체력을 최대 체력으로 설정한다.
	}

    // ★★★ 모든 유닛이 가져야 할 '움직이는' 동작을 추상 메소드로 추가한다! ★★★
    // 이제 자식 클래스들이 이 메소드를 무조건 구현해야 한다!
    public abstract void move(int x, int y);

    // ★★★ 유닛 이름을 문자열로 반환하는 toString() 메소드 추가 (선택 사항이지만 유용!) ★★★
    // 이거 없으면 SCV 수리 메시지에 객체 주소 같은 게 찍힌다!
    @Override
    public String toString() {
        return "Unit"; // 기본적으로는 "Unit"이라고 반환하지만, 각 자식 클래스에서 재정의해서 유닛 이름을 반환하면 좋다.
    }
}