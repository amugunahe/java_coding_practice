package com.excp; // 이 자바 파일(클래스)이 속한 패키지 이름이다.

/*
 * 예외처리 (Exception Handling):
 *    정의: 프로그램 실행 시 발생할 수 있는 '예외적인 상황(오류)'에 대비해서 코드를 미리 작성하는 것이다.
 *    목적: 프로그램이 갑자기 뻗는(비정상 종료) 것을 막고, 최대한 정상적인 실행 상태를 유지하는 것이 목적이다.
 *    
 *    예외를 처리하기 위한 핵심 문법: `try ~ catch` 문
 *    
 *    기본 형식:
 *    try {
 *        // 예외가 발생할 가능성이 있는 코드를 작성하는 곳이다.
 *    } catch(ExceptionType1 e1) { // 'ExceptionType1' 예외가 발생했을 경우 이를 처리하는 코드를 작성하는 곳이다.
 *        // 예외 정보를 'e1' 변수로 받아서 활용할 수 있다.
 *    } catch(ExceptionType2 e2) { // 'ExceptionType2' 예외가 발생했을 경우 이를 처리하는 코드를 작성하는 곳이다.
 *        // 여러 종류의 예외를 처리하려면 `catch` 블록을 여러 개 붙일 수 있다.
 *    } // ... 이런 식으로 계속 추가할 수 있다.
 *
 * ----------------------------------------------------------------------------------------------------
 * ExceptionEx01 클래스: **`try-catch`문의 기본 사용법과 '변수 스코프(영역)' 규칙을 보여주는 예제다!**
 *
 * 핵심:
 * - **`try-catch` 중첩:** `try` 블록 안에 또 다른 `try-catch` 블록을 넣을 수 있다. (문법적으로는 가능!)
 * - **변수 스코프 규칙 (존나 중요!):**
 * - 자바에서는 같은 '스코프(영역)' 안에서 똑같은 이름의 변수를 두 번 선언할 수 없다!
 * - `{ }` 중괄호가 하나의 스코프(영역)를 만든다고 생각하면 된다.
 * - **컴파일 에러 발생 지점:**
 * - `main` 메소드 전체가 하나의 큰 스코프다.
 * - 첫 번째 `try-catch` 블록에서 안쪽 `catch(Exception e)`가 `e`라는 변수를 선언했다.
 * - 그리고 그 바깥쪽 `catch (Exception e)`도 같은 `main` 메소드 스코프 안에서 `e`라는 변수를 **또 다시 선언하려고 해서 컴파일 에러가 나는 거다, 씨발!** (이미 `e`가 있다고 지랄하는 거지!)
 * - **해결책:** 변수 이름이 겹치지 않게 다른 이름을 쓰거나, 스코프를 다르게 하면 된다.
 * - 니가 이미 안쪽에서 `e1`이라고 써서 하나는 잘 피해갔다!
 */

public class ExceptionEx01 {

	public static void main(String[] args) { // 이 'main' 메소드 전체가 하나의 스코프(영역)다!
		
		try { // 첫 번째 'try' 블록 시작
			try { // 안쪽 'try' 블록 시작
				// 이 안에는 예외 발생 가능성이 있는 코드가 들어갈 수 있다. (지금은 비어있음)
			} catch(Exception e) { // 안쪽 'catch' 블록 시작: 'Exception' 타입의 예외를 'e'라는 변수로 받는다.
				// 이 'e' 변수는 이 안쪽 'catch' 블록의 스코프 내에서만 유효하다.
			} // 안쪽 'try-catch' 블록 끝
		} catch (Exception e) { // ★★★ 존나 중요! 바깥쪽 'catch' 블록 시작: 여기서 또 다시 'Exception e'를 선언하려고 한다! ★★★
			                     // 윗줄의 안쪽 'catch'에서 이미 'e'라는 이름의 변수가 선언되었고,
                                 // 'main' 메소드라는 더 큰 동일 스코프 내에서 이 'e'를 다시 선언하려 하므로 **컴파일 에러가 발생한다, 씨발!**
			try {}catch(Exception e1) { // 이 안쪽 'catch'는 'e1'이라는 다른 변수 이름을 사용했으므로 문제없다.
				                         // 'e1'은 이 가장 안쪽 'catch' 블록 스코프 내에서만 유효하다.
			} // 가장 안쪽 'try-catch' 블록 끝
		} // 바깥쪽 'try-catch' 블록 끝
		
		// 아래의 'try-catch' 블록은 위쪽 블록들과는 완전히 별개의 스코프에서 'e' 변수를 선언하므로 문제없다.
		try { // 두 번째 독립적인 'try' 블록 시작
			// 이 안에도 예외 발생 가능성이 있는 코드가 들어갈 수 있다. (지금은 비어있음)
		} catch(Exception e) { // 두 번째 독립적인 'catch' 블록 시작: 'e' 변수 선언.
			                    // 이 'e' 변수는 이 'catch' 블록의 스코프 내에서만 유효하며,
			                    // 위에서 발생한 'e' 변수 중복 선언 문제와는 무관하다.
		} // 두 번째 독립적인 'try-catch' 블록 끝
	} // main 메소드 종료

} // ExceptionEx01 클래스 종료

