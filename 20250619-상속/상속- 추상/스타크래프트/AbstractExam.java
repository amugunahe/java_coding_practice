package com.abstractex; // 이 코드가 속한 폴더(패키지) 이름이다.

/*
  AbstractExam 클래스: **추상 클래스랑 다형성 존나게 테스트하는 메인 프로그램!**
 
  핵심:
  - **'Unit'이라는 추상 클래스 배열을 만들어서 다양한 유닛(Marine, Tank, Dropship)들을 한 방에 담는다!** (이게 다형성!)
  - 각 유닛들이 `move()` 메소드를 호출할 때, **실제 유닛 타입에 맞는 `move()`가 자동으로 실행되는 걸 보여준다!** (추상 메소드의 오버라이딩 활용!)
 */

public class AbstractExam {

	public static void main(String[] args) { // ★★★ 여.기.서.부.터. 프로그램 시작! ★★★
		
		// ★★★ 존나 중요! 'Unit'이라는 추상 클래스 타입의 배열을 4칸 만든다! ★★★
		// 이 배열에는 'Unit'을 상속받는 모든 자식 유닛들을 존나게 담을 수 있다! (다형성!)
		Unit[] u = new Unit[4];

		// --- 각 칸에 다른 유닛 객체 집어넣기 ---
		u[0] = new Marine();   // 첫 번째 칸에 마린 집어넣어!
		u[1] = new Tank();     // 두 번째 칸에 탱크 집어넣어!
		u[2] = new Marine();   // 세 번째 칸에 마린 또 집어넣어!
		u[3] = new Dropship(); // 네 번째 칸에 드라군(드랍십) 집어넣어!

		// --- 모든 유닛 이동시키기 ---
		// 배열에 있는 모든 유닛들을 하나씩 돌면서 `move()` 메소드를 시킨다.
		for (int i = 0; i < u.length; i++) {
			// ★★★ 존나 중요! 'u[i].move()'를 호출하면, ★★★
			// ★★★ 실제 'u[i]'가 가리키는 유닛(마린, 탱크, 드랍십)에 오버라이딩된 'move()'가 자동으로 실행된다! ★★★
			// (각 유닛마다 움직이는 방식이 다르게 출력될 거다!)
			u[i].move(100, 200); // 모든 유닛을 (100, 200) 좌표로 이동시켜!
		}
	}
}
