package com.abstractex; // 이 코드가 속한 폴더(패키지) 이름이다.

/*
  Player 클래스: **모든 플레이어들의 존나게 중요한 '추상' 부모 설계도!**
 
  핵심:
  - **'abstract' 키워드가 붙어서 이 클래스는 추상 클래스다!** (지 혼자서는 객체를 못 만든다, 씨발!)
  - 모든 플레이어가 공통으로 가질 **속성(pause, currentPos)**을 정의한다.
  - **`play(int pos)`랑 `stop()`이라는 '추상 메소드'를 가지고 있다!**
  -> 이게 존나 중요하다! 이 새끼들은 내용이 비어있고, **자식 클래스들이 무조건 지만의 방식으로 구현(오버라이딩)해야 한다!**
  (왜냐고? 오디오 플레이어랑 CD 플레이어가 '재생'하고 '멈추는' 방식이 다를 거 아니냐, 씨발!)
  - **`play()` (매개변수 없는 오버로드)**랑 **`pause()`** 같은 **구현된 메소드**도 가지고 있다.
  -> 이 메소드들은 추상 메소드를 활용해서 공통적인 동작을 정의한다!
 */

public abstract class Player {
	// 추상화: 클래스 간에 공통점을 찾아내서 공통의 조상 클래스로 만드는 작업 (존나 중요한 개념이다!)

	// --- 멤버 변수 (속성) ---
	boolean pause; // 플레이어의 일시 정지 상태를 저장하는 변수 (true: 정지, false: 재생 중)
	int currentPos; // 현재 재생되고 있는 위치(position)를 저장하는 변수.

	// --- 생성자 ---
	public Player() {
		pause = false;    // 기본적으로 정지 상태가 아님 (재생 준비)
		currentPos = 0;   // 현재 위치는 0부터 시작
	}

	// --- 추상 메소드 (자식들이 무조건 구현해야 함!) ---
	// ★★★ 존나 중요! 'abstract' 메소드! ★★★
	// 내용이 없다. 그냥 선언만 돼 있다.
	// 이걸 상속받는 자식 클래스들은 **무조건 이 메소드들을 지만의 방식으로 구현해야 한다!**
	abstract void play(int pos); // 특정 위치부터 재생하는 추상 메소드.
	abstract void stop();        // 재생을 멈추는 추상 메소드.

	// --- 일반 메소드 (구현되어 있음) ---
	// 'play(int pos)' 추상 메소드를 활용해서 구현된 메소드!
	void play() {
		// ★★★ 존나 중요! 추상 메소드 'play(int pos)'를 여기서 호출할 수 있다! ★★★
		// 'currentPos'에 저장된 위치부터 재생하라는 의미다.
		// 실제 재생 동작은 이 클래스를 상속받는 자식 클래스(예: AudioPlayer)에서 구현된 'play(int pos)'가 실행된다.
		play(currentPos);
	}

	// '일시 정지' 혹은 '재개' 기능을 하는 메소드.
	void pause() {
		if(pause) { // 현재 'pause' 상태가 true일 때 (즉, 정지 상태일 때)
			pause = false; // 'pause' 상태를 false로 바꾸고 (이제 재생 중으로 전환!)
			play(currentPos); // 현재 위치부터 다시 'play()' 메소드를 호출해서 재생을 재개한다!
		} else { // 현재 'pause' 상태가 false일 때 (즉, 재생 중일 때)
			pause = true; // 'pause' 상태를 true로 바꾸고 (이제 정지 상태로 전환!)
			stop(); // 'stop()' 메소드를 호출해서 재생을 멈춘다!
		}
	}
}
