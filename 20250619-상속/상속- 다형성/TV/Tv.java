package com.polymorphism; // 이 클래스(Tv.java)가 속한 패키지 이름입니다.
                         // 패키지는 관련된 클래스들을 묶어서 관리하는 '폴더'와 같은 역할을 해요.

/* 다형성(polymorphism)
  - 여러가지 형태를 가질 수 있는 능력을 의미함
  - 자바에서는 한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있도록함으로써
  다형성을 구현한다.
 
  조상 클래스의 참조변수로 자손 클래스의 인스턴스를 참조할 수 있도록 하는 것
 
  추가 설명:
  다형성은 코드의 유연성과 재사용성을 높여줍니다. 예를 들어, 'Tv'라는 조상 타입의 변수로
  'SmartTv', 'OldTv' 등 다양한 자손 타입의 객체들을 한꺼번에 다룰 수 있게 해줘요.
  이렇게 하면 특정 자손 타입에 종속되지 않고, 공통된 기능(전원 켜고 끄기, 채널 변경)을
  일관된 방식으로 처리할 수 있습니다. 마치 '탈 것'이라는 큰 범주로 '자동차', '자전거' 등을
  모두 아우를 수 있는 것과 같아요.
 */

public class Tv { // 'Tv'라는 이름의 공개(public) 클래스를 선언합니다.
                  // 이 클래스는 '텔레비전'이라는 개념을 자바 코드로 나타낸 '설계도'입니다.

	boolean power; // 텔레비전의 전원 상태를 나타내는 논리형(boolean) 변수입니다.
                   // 'true'면 켜짐, 'false'면 꺼짐을 의미하겠죠.
	int channel;   // 현재 텔레비전의 채널 번호를 나타내는 정수(int) 변수입니다.

	// 이 메소드들은 텔레비전이 수행할 수 있는 '행동'을 정의합니다.

	void power() { // 'power()' 메소드는 텔레비전의 전원을 켜고 끄는 기능을 합니다.
		power = !power; // 'power' 변수의 현재 값을 반대로 바꿉니다. (true <-> false)
                        // 전원이 켜져 있으면 끄고, 꺼져 있으면 켜는 '토글' 기능이에요.
	}

	void channelUp() { // 'channelUp()' 메소드는 채널을 한 단계 올립니다.
		++channel; // 'channel' 변수의 값을 1 증가시킵니다. (예: 5번 채널에서 6번 채널로)
	}

	void channelDown() { // 'channelDown()' 메소드는 채널을 한 단계 내립니다.
		--channel; // 'channel' 변수의 값을 1 감소시킵니다. (예: 5번 채널에서 4번 채널로)
	}
}
