package com.polymorphism; // 이 클래스(TvTest.java)가 속한 패키지 이름입니다.

/* 이 'TvTest' 클래스는 'main' 메소드 없이 일부 변수 선언과 주석만으로
  '다형성', '업캐스팅', '다운캐스팅' 개념을 설명하는 예제 코드입니다.
 
  핵심 개념:
   1. 다형성: 하나의 참조 변수가 여러 타입의 객체를 참조할 수 있는 능력.
  2. 업캐스팅: 자식 타입의 객체를 부모 타입의 참조 변수로 다루는 것. (안전하며 형변환 생략 가능)
  3. 다운캐스팅: 부모 타입의 참조 변수를 다시 자식 타입으로 다루는 것. (명시적 형변환 필요, 런타임 오류 발생 가능성 있음)
 */

public class TvTest {

    // Tv v = new Tv(); // 이 라인은 주석 처리되어 있어 현재 코드에서는 실행되지 않습니다.
                       // 만약 이 코드가 실행된다면, 'Tv' 타입의 변수 'v'가 'Tv' 객체를 참조하게 됩니다.

    // --- CaptionTv 객체 생성 및 참조 ---
    // 'CaptionTv' 타입의 참조 변수 'c'를 선언하고, 'CaptionTv' 객체를 생성하여 'c'가 참조하게 합니다.
    // 'CaptionTv'는 'Tv'를 상속받은 자식 클래스라고 가정합니다.
	
    CaptionTv c = new CaptionTv();

    // 주석: "CaptionTv 인스턴스의 멤버중에서 Tv클래스에 정의되지 않는 멤버,
    //      text, catpion은 참조변수 t로는 사용이 불가능 하지만,
    //      c는 둘다 사용이 가능하다."

    // 위 주석에 대한 추가 설명:
    // 'CaptionTv'는 'Tv'로부터 'power', 'channel'과 같은 멤버를 물려받고,
    // 'text'나 'caption'과 같은 자신만의 고유한 멤버(변수나 메소드)를 추가로 가지고 있을 거예요.
    // 변수 'c'는 'CaptionTv' 타입이기 때문에, 'CaptionTv' 객체가 가진 모든 멤버(Tv로부터 물려받은 것 + CaptionTv 고유의 것)에 접근할 수 있습니다.
    // (여기서 't'는 아마 아래 'Tv v'를 't'라고 오타를 내신 것 같습니다.)

    // --- 다형성과 업캐스팅 예시 ---
    // 'Tv' 타입의 참조 변수 'v'를 선언하고, 'CaptionTv' 객체를 생성하여 'v'가 참조하게 합니다.
    // 이것이 바로 **다형성**의 핵심이자, **업캐스팅(Upcasting)**의 예시입니다.
    // 'CaptionTv'는 'Tv'의 자식 클래스이므로, 자식 객체(new CaptionTv())를 부모 타입(Tv)의 참조 변수 'v'로 가리킬 수 있습니다.
    
    Tv v = new CaptionTv();

    // 주석: "부모 클래스의 참조 변수로 자식 클래스의 인스턴스를 참조한다." (정확한 설명입니다.)
    // 주석: "참조 변수 t로 CaptionTv 인스턴스의 모든 멤버를 사용할 수 없다."

    // 위 주석에 대한 추가 설명:
    // 변수 'v'는 'Tv' 타입으로 선언되었기 때문에, 비록 실제로는 'CaptionTv' 객체를 가리키고 있어도,
    // 'v'로는 'Tv' 클래스에 정의된 멤버(예: power, channel, power(), channelUp(), channelDown())만 접근할 수 있습니다.
    // 'CaptionTv'에만 있는 고유한 멤버(예: text, caption, 특정 캡션 관련 메소드)는 'v' 변수로는 직접 접근할 수 없습니다.
    // (여기서도 't'는 'v'의 오타로 보입니다.)
    // 마치 '탈 것'이라는 이름표가 붙은 상자에 '소방차'가 들어있어도, 상자만 보고서는 '물 뿌리기' 기능을 바로 알 수 없는 것과 같습니다.

    /*
      주석: 업캐스팅
      자손 타입 --> 조상타입으로 형변환됨 (형변환 생략 가능)
     
      추가 설명:
      업캐스팅은 항상 안전합니다. 자식은 부모의 모든 특성을 가지고 있기 때문에,
      자식을 부모로 취급하는 것은 문제가 되지 않습니다. 컴파일러가 자동으로 처리해 줍니다.
      예: Car car = new FireEngine(); (여기서 (Car) 생략 가능)
     */

    /* 주석: 다운 캐스팅
       자손 타입 <-- 조상타입으로 형변환됨 (형변환 생략불가: 명시적 형변환)
     
      추가 설명:
      다운캐스팅은 명시적인 형변환(예: (자식클래스명)변수)이 필요합니다.
      그리고 **실행 시점(런타임)에 실제 객체의 타입과 캐스팅하려는 자식 타입이 일치해야만 성공합니다.**
      그렇지 않으면 'ClassCastException'이라는 런타임 오류가 발생합니다.
      예: FireEngine fe = (FireEngine)car;
      (단, car가 실제 FireEngine 객체를 참조하고 있을 때만 성공합니다.)
     */

    // 이 클래스에는 'main' 메소드가 없으므로, 이 파일 자체를 실행할 수는 없습니다.
    // 아마도 다른 클래스(예: TvTestMain.java)의 main 메소드에서
    // 위에서 설명한 변수들을 활용하여 다형성과 형변환을 테스트하게 될 것입니다.
}
