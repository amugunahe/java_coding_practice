package ioex; // 야, 이 코드가 여기 산다. 주소 박아놨으니까 딴 데서 헤매지 마라.

/* write() 메소드: 화면 출력시 버퍼에 저장됨
    System.out.flush(); 메소드 실행-> 버퍼에 저장되어 있는 내용을 비워라
*/ // 'write()'는 일단 내용 버퍼에 잠시 짱박아두고, 'flush()'는 짱박아둔 거 화면에 바로 내보내는 거다.

public class WriteEx { // 야, WriteEx 이름으로 프로그램 시작한다. 이 파일 이름이랑 똑같으니까 틀리면 뒤진다.

	public static void main(String[] args) { // 여기가 진짜 시작점이다. 무조건 여기부터 실행된다고 보면 됨.

		System.out.write(65); // 65라는 숫자(아스키코드로 'A'임) 화면에 뿌리려고 한다.
		// 근데 이게 바로 화면에 튀어나오는 게 아니라, System.out 스트림의 내부 "버퍼"에 잠깐 숨어있게 된다.

		System.out.flush(); // 이 새끼가 존나 중요하다!
		// 'flush()'는 버퍼에 숨어있던 데이터들을 "강제로" 화면으로 쏴서 버퍼를 비워버리는 역할을 한다.
		// 이게 없으면 'A'가 바로 안 보일 수도 있다. (프로그램 끝나면 자동으로 비워지긴 하는데, 당장 보고 싶을 때 쓰는 거임.)

		System.out.println(); // 화면에 빈 줄 하나 출력한다. (줄 바꿈 효과임)
		// System.out.println()은 대부분 알아서 flush() 기능을 포함하고 있어서,
		// 앞선 write() 내용이 이거 때문에 자동으로 튀어나올 수도 있다.

		byte[] by = {'J','A','V','A'}; // 'J', 'A', 'V', 'A' 글자들을 바이트(byte) 배열로 만들었다.
		// 글자들이 컴퓨터에서는 숫자로 돼있는데, 그 숫자들을 byte 타입으로 배열에 박아 넣은 거다.
		// 'J'는 74, 'A'는 65, 'V'는 86이다.

		System.out.write(by, 0, 4); // 'by' 배열에 있는 데이터들을 화면에 출력한다.
		// by: 출력할 데이터가 담긴 바이트 배열이다.
		// 0: 배열의 첫 번째(0번째) 놈부터 시작해서 출력하라는 의미다.
		// 4: 총 4개(J, A, V, A)를 출력하라는 의미다.

		// 바이트 배열을 사용한 경우는 autoflush 기능이 내장되어있다
		// 주석에 써있듯이, 배열을 write() 할 때는 대부분 자동으로 버퍼를 비워주는 'autoflush' 기능이 작동한다.
		// 그러니까 이때는 System.out.flush(); 이걸 굳이 안 불러도 'JAVA'가 바로 화면에 보일 거다.
		// (보통 System.out.println()도 autoflush 기능이 있다.)
	}
}
