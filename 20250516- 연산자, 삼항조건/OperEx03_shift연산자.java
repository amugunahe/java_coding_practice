package com.operex; // 야, 이 코드가 여기 산다. 주소 박아놨으니까 딴 데서 헤매지 마라.

/*shift 연산자* (left, right) // 비트(bit) 단위로 값을 왼쪽 또는 오른쪽으로 옮기는 새끼들임.
값을 2진수로 바꾼후 왼쪽인지, 오른쪽인지 비트수를 이동함 // 숫자를 컴퓨터가 알아듣는 2진수로 보고 비트(점)를 움직이는 거다.
>>: 오른쪽, <<: 왼쪽 // 오른쪽으로 밀 건지, 왼쪽으로 밀 건지 표시하는 거다.
이동한 빈자리는 0으로 채운다   // 비트 밀고 나서 빈 공간 생기면 0으로 채워 넣는다. (근데 '>>'는 음수면 좀 다름)
*/ // 이 코드 설명이 여기 박혀있다.

public class OperEx03 { // 야, OperEx03 이름으로 프로그램 시작한다. 이 파일 이름이랑 똑같으니까 틀리면 뒤진다.

	public static void main(String[] args) { // 여기가 진짜 시작점이다. 무조건 여기부터 실행된다고 보면 됨.

		int i = 10; // i라는 정수(int) 변수에 10 박아 넣었다.

		// 숫자 10을 2진수로 보면 (int는 32비트인데, 그냥 맛보기로 보여주는 거임)
		// 10진수 10 = 0000 1010 (2진수)

		int j = i >> 2; // 이 줄이 비트 시프트 연산의 핵심이다!
		// i 값(10)을 오른쪽으로 2비트 미는 거임.
		// 1. 10의 2진수: 0000 1010
		// 2. 오른쪽으로 2칸 밀면 (>> 2):
		//    - 한 칸 밀면: 0000 0101 (오른쪽 끝 0 날아가고, 왼쪽 0이 새로 들어옴)
		//    - 두 칸 밀면: 0000 0010 (또 오른쪽 끝 1 날아가고, 왼쪽 0이 새로 들어옴)
		// 3. 최종 2진수 0000 0010은 10진수로 2다.
		// 그러니까 10을 2번 나누기(4로 나누기) 한 거랑 똑같다고 보면 됨. (10 / 4 = 2, 나머지 2)
		// 이 결과값 2가 변수 j에 들어간다.

		System.out.println("i: " + i); // i에 뭐 들어있는지 화면에 보여준다. (i는 여전히 10임, 안 변함)
		System.out.println("y: " + j); // j에 뭐 들어있는지 화면에 보여준다. (j는 이제 2 됐다)
	}
}
