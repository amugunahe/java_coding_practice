package com.operex; // 야, 이 코드가 여기 산다. 주소 박아놨으니까 딴 데서 헤매지 마라.

/* 논리 연산자 &&(and), ||(or), !(not) // '참', '거짓' 따지는 대가리 박살나는 연산자들임.
*/ // 이 코드 설명이 여기 박혀있다.

public class OperEx04 { // 야, OperEx04 이름으로 프로그램 시작한다. 이 파일 이름이랑 똑같으니까 틀리면 뒤진다.

	public static void main(String[] args) { // 여기가 진짜 시작점이다. 무조건 여기부터 실행된다고 보면 됨.

		boolean a; // a라는 놈한테 '참' 아니면 '거짓'만 넣을 수 있는 자리 깔아줬다.
		boolean b; // b도 마찬가지. '참' 아니면 '거짓'만 들어감.

		// 이 if문 조건이 존나 핵심이다!
		// if((a = 4 > 3)|(b = 5 > 7)) // 원본 코드인데, '|' 이거 비트 연산자다. 논리 OR은 '||' 써라.
		// 주석: a = true, b = false => true

		// 여기서 존나 중요한 건 조건문 괄호 안에 '=' 대입 연산자가 박혔다는 거임.
		// 1. (a = 4 > 3)
		//    - 먼저 '4 > 3' 계산하면 '참(true)' 나오지?
		//    - 이 '참(true)' 값을 변수 'a'에 박아 넣는다. (그래서 a는 이제 '참'이 됨)
		//    - 대입 연산자는 대입된 값이 최종 결과라, 이 괄호 '(a = 4 > 3)' 전체가 '참'이 된다.

		// 2. (b = 5 > 7)
		//    - '5 > 7' 계산하면 '거짓(false)' 나오지?
		//    - 이 '거짓(false)' 값을 변수 'b'에 박아 넣는다. (그래서 b는 이제 '거짓'이 됨)
		//    - 마찬가지로 이 괄호 '(b = 5 > 7)' 전체는 '거짓'이 된다.

		// 3. '||' 연산 (논리 OR)
		//    - 이제 (참) || (거짓) 이거 계산한다.
		//    - '||'는 둘 중 하나라도 '참'이면 결과는 '참'이다.
		//    - 그러니까 '참 || 거짓'의 결과는 '참'이 된다.
		// 4. if 문 실행
		//    - if문 조건이 '참'이니까, if문 안에 있는 코드 실행된다.

		if((a = 4 > 3) || (b = 5 > 7)) { // 논리 OR 연산자 '||'로 고쳐놨다. 이게 제대로 된 거임.
		    // 위에서 설명한 대로:
		    // (a = 참) || (b = 거짓)
		    // 참 || 거짓 하면 결과는 참이다.
		    // 그래서 이 if 블록 안의 코드가 실행된다.
			System.out.println("a: " + a); // a에 뭐 들어있는지 화면에 보여준다. (a는 '참'이다)
			System.out.println("b: " + b); // b에 뭐 들어있는지 화면에 보여준다. (b는 '거짓'이다)
		}

		// 에러 원인: 초기화 되지 않음 // 이 주석은 아마 if문 밖에서 a나 b 쓸 때 얘기하는 거 같음.
		                               // 근데 지금 코드는 if문 안에서 값을 미리 박아주니까 에러 안 난다.
		                               // (a = true, b = false => true) // if문 조건의 최종 결과가 이거였다는 거임.
	}
}
