package com.operex; // 이 코드가 속한 폴더(패키지)를 나타내요. (패키지는 관련된 클래스들을 모아두는 일종의 폴더입니다.)

/* 논리 연산자 &&(and), ||(or), !(not) // 자바에서 사용되는 세 가지 주요 논리 연산자입니다.
*/ // 이 코드에 대한 기본적인 설명이 여기에 적혀있어요.

public class OperEx04 { // 'OperEx04'라는 이름의 프로그램을 시작하는 클래스입니다. (모든 자바 코드는 클래스 안에 작성돼요.)

	public static void main(String[] args) { // 프로그램이 실제로 시작되는 부분이에요. 자바 프로그램은 항상 이 'main' 메서드부터 실행됩니다.
		
		boolean a; // 'a'라는 이름의 'boolean' 타입 변수를 선언했어요. 이 변수에는 true 또는 false만 저장될 수 있습니다.
		boolean b; // 'b'라는 이름의 'boolean' 타입 변수를 선언했어요. 'a'와 마찬가지입니다.
		
		// 이 if문 안의 조건식이 핵심입니다!
		// if((a = 4 > 3)|(b = 5 > 7)) // 원본 코드 (단일 '|'는 비트 OR 연산자입니다. 논리 OR '||'와 혼동 주의!)
		// 주석: a = true, b = false => true
		
		// 여기서 중요한 점은 조건문 괄호 안에 '=' 대입 연산자가 쓰였다는 거예요.
		// 1. (a = 4 > 3)
		//    - 먼저 '4 > 3'을 평가합니다. 결과는 true입니다.
		//    - 이 true 값을 변수 'a'에 대입합니다. (a는 이제 true가 됩니다.)
		//    - 대입 연산의 결과는 대입된 값이므로, 이 괄호 '(a = 4 > 3)' 전체의 값은 true가 됩니다.
		
		// 2. (b = 5 > 7)
		//    - 먼저 '5 > 7'을 평가합니다. 결과는 false입니다.
		//    - 이 false 값을 변수 'b'에 대입합니다. (b는 이제 false가 됩니다.)
		//    - 대입 연산의 결과는 대입된 값이므로, 이 괄호 '(b = 5 > 7)' 전체의 값은 false가 됩니다.
		
		// 3. '|' 연산 (논리 OR)
		//    - 이제 (true) | (false) 를 연산합니다.
		//    - 단일 '|'는 비트 OR 연산자이기도 하지만, boolean 타입에 적용되면 논리 OR처럼 동작합니다.
		//      하지만 **일반적으로 논리 연산에는 '||' (단축 평가)를 사용하는 것이 권장됩니다.**
		//    - true || false 의 결과는 true입니다.
		// 4. if 문 실행
		//    - if문의 조건이 true이므로, if문 내부의 코드가 실행됩니다.

		if((a = 4 > 3) || (b = 5 > 7)) { // 논리 OR 연산자 '||'로 수정했습니다.
		    // 위에서 설명한 대로:
		    // (a = true) || (b = false)
		    // true || false 의 결과는 true입니다.
		    // 따라서 이 if 블록 안의 코드가 실행됩니다.
			System.out.println("a: " + a); // 'a' 변수에 저장된 값을 화면에 출력해요. (a는 true)
			System.out.println("b: " + b); // 'b' 변수에 저장된 값을 화면에 출력해요. (b는 false)
		}
		
		// 에러 원인: 초기화 되지 않음 // 이 주석은 아마도 if문 밖에서 'a'나 'b'를 사용하려고 할 경우를 가정한 것 같습니다.
		                               // 하지만 현재 코드에서는 if문 내에서 a, b가 먼저 대입되고 사용되므로 오류는 발생하지 않습니다.
		                               // (a = true, b = false => true) // 이 주석은 if문 조건식의 최종 결과를 설명하고 있어요.
	}		
}
