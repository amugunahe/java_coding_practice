package com.objectex; // 이 코드가 속한 폴더(패키지) 이름이다.

/*
  MethodClass02 클래스: **메소드의 형식, 지역 변수, 반환값 등 존나게 중요한 기본 개념들을 보여주는 예제다!**
 
  핵심:
  - **메소드(Method) 형식:**
  `접근제한자 반환타입 메소드이름(자료형 변수명, ...)` <- ★선언부★ (메서드가 어떤 놈인지 정의)
  `{ ... }` <- ★구현부★ (메서드가 실제로 뭘 할지 코드 작성)
  - **`add` 메소드:** 숫자 두 개 받아서 더한 결과를 반환하는 존나 기본적인 메소드다.
  - **`name` 메소드:** 문자열 받아서 처리하는 예시인데, 지금은 비어있다. (나중에 채워 넣으면 된다!)
  - **클래스 멤버 변수 vs 지역 변수:** `int i;` (클래스 멤버)랑 `print99dan()` 안의 `int i;` (지역 변수)는 **완전히 다른 놈들이다!** (존나 중요!)
  - **`void` 키워드:** "아무것도 없음"을 뜻한다! 메소드가 **어떤 값도 반환하지 않을 때** 반환 타입으로 `void`를 쓴다.
  - **`print99dan` 메소드:** `void` 타입이라 구구단을 출력만 하고 끝내는 메소드다.
  - **`return` 키워드:** 메소드 수행 결과를 **호출한 곳으로 돌려주는 역할**을 한다! `void` 타입 메소드에서도 `return;`으로 일찍 종료시킬 수 있다.
  - **지역 변수 (Local Variable) 특징:** 메소드 안에서 선언된 변수는 그 메소드 안에서만 쓸 수 있다! (다른 메소드랑 이름 같아도 상관 없음!)
  - **인자 (Argument) vs 매개변수 (Parameter) (존나 중요!):**
  - 메소드 호출할 때 괄호() 안에 넘겨주는 값들 → **인자 (Arguments)** (던져주는 공)
  - 메소드 선언부에 괄호() 안에 정의된 변수들 → **매개변수 (Parameters)** (공을 받는 손)
  - 인자의 개수, 순서, 타입은 매개변수랑 무조건 일치해야 한다!
 */

public class MethodClass02 { // 'MethodClass02'라는 이름의 공개(public) 클래스를 정의한다.

	// ★★★ 1. 숫자 두 개 더하는 메소드: `add` ★★★
	// 선언부: `public` (어디서든 접근 가능), `int` (int형 값 반환), `add` (메소드 이름), `(int x, int y)` (int형 x, y를 매개변수로 받음)
	public int add(int x, int y) { // `add` 메소드의 선언부다.
		int result; // 'result'는 이 메소드 안에서만 쓰이는 '★지역 변수★'다.
					// 메소드가 실행될 때 메모리에 생겼다가, 메소드 실행이 끝나면 존나게 사라진다!

		return result = x + y; // `add` 메소드의 구현부다.
							  // 1. `x + y`를 계산해서 그 결과를 `result` 변수에 넣고
							  // 2. 그 `result` 값을 이 메소드를 호출한 곳으로 ★`return` (반환)★한다.
							  // 반환 타입이 `int`니까 `int`형 값을 돌려줘야 한다. (안 그러면 에러난다, 씨발!)
	}

	// ★★★ 2. 이름 받아서 처리하는 메소드 (지금은 비어있음): `name` ★★★
	// 'String'을 반환 타입으로 가진다. 문자열을 돌려준다는 뜻이다.
	public String name(String na) {
		return ""; // 지금은 아무 내용 없이 그냥 빈 문자열을 반환한다. (나중에 기능 추가하면 된다!)
	}

	// ★★★ 이 `int i;`는 클래스의 '멤버 변수'다! ★★★
	// 'MethodClass02' 객체를 만들면 이 `i` 변수가 생긴다.
	// 아래 `print99dan()` 메소드 안의 `i`랑은 **완전히 다른 변수**다. (이게 존나 중요!)
	int i; 

	/*
	  ★★★ `void` 란? ★★★
	  - "아무것도 없음"을 뜻한다.
	  - 메소드가 **어떤 값도 반환하지 않을 때** 반환 타입으로 `void`를 쓴다.
	  - 그냥 특정 동작만 수행하고 끝날 때 사용한다. (예: `System.out.println()`)
	 */

	// ★★★ 3. 구구단 출력하는 메소드: `print99dan` ★★★
	// 선언부: `void` (반환값 없음), `print99dan` (메소드 이름), `()` (매개변수 없음)
	// 접근 제한자가 생략되면 'default' 접근 제한자가 적용된다. 같은 패키지 안에서만 접근 가능하다.
	void print99dan() { // `print99dan` 메소드의 선언부다.
		// 이 `for` 문 안의 `int i`는 `print99dan` 메소드 안에서만 유효한 '★지역 변수★'다!
		// 위 클래스 멤버 변수 `int i;`랑 이름은 같지만 전혀 다른 놈이다!
		for (int i = 1; i <= 9; i++) { // 첫 번째 for문: 1단부터 9단까지 반복한다. (j * i)
			for (int j = 2; j <= 9; j++) { // 두 번째 for문: 각 단의 2부터 9까지 곱셈을 수행한다.
				System.out.print(j + "*" + i + "=" + (j * i) + " "); // 구구단 결과를 "단*수=결과 " 형태로 출력한다.
			}
			System.out.println(); // 한 단의 출력이 끝나면 줄바꿈을 한다. (다음 단은 새 줄에서 시작!)
		}
		return; // `void` 메소드에서는 `return;`을 써도 되고 생략해도 된다. 메소드의 실행을 종료한다는 의미다.
	}

	/*
	  ★★★ `return` 이란? ★★★
	  - 메소드 수행 결과를 **★호출한 곳으로 돌려주는 역할★**을 한다.
	  - 반환하는 값의 타입은 선언부의 반환 타입(`public int add(...)`의 `int`)이랑 같거나,
	  자동으로 형변환 가능해야 한다. (안 그러면 에러난다, 씨발!)
	  - `void` 메소드에서는 `return;`만 써서 메소드를 중간에 끝낼 수 있다.
	 */

	/*
	  ★★★ 지역 변수 (Local variable) 특징 ★★★
	  - 메소드 내에 선언된 변수는 그 메소드 안에서만 쓸 수 있다.
	  - 그래서 서로 다른 메소드라면 같은 이름의 변수를 선언해도 상관 없다.
	  (예: `add` 메소드 안의 `result` 변수랑 `print99dan` 메소드 안의 `i` 변수)
	  - 메소드 호출 시 생성되고 메소드 종료 시 사라진다.
	 */

	/*
	  ★★★ 인자 (Argument) vs 매개변수 (Parameter) (존나 중요!) ★★★
	  - 메소드를 호출할 때 괄호() 안에 넘겨주는 값들 → **인자 (Arguments)** (메소드로 던져주는 '실제 값'이다!)
	  - 메소드 선언부에 괄호() 안에 정의된 변수들 → **매개변수 (Parameters)** (던져진 인자를 받는 '변수'다!)
	  - 예시: `m.add(10, 2);`
	  - `10`, `2`는 **인자(Arguments)**다.
	  - `public int add(int x, int y)`에서 `int x`, `int y`는 **매개변수(Parameters)**다.
	  - 인자로 넘겨준 값이 매개변수에 복사돼서 메소드 안에서 사용된다.
	  - 인자의 개수, 순서, 타입은 매개변수랑 무조건 일치해야 한다! (안 그러면 에러난다, 씨발!)
	 */

	// ★★★ 프로그램 시작점 (메인 메소드) ★★★
	public static void main(String[] args) {

		// 'static'이 안 붙은 메소드(`add`, `name`, `print99dan`)를 쓰려면
		// 먼저 이 클래스의 객체를 만들어야 한다.
		MethodClass02 m = new MethodClass02(); // 'MethodClass02' 타입의 'm'이라는 객체를 생성한다.

		// 1. `print99dan` 메소드 호출
		// 'm' 객체의 `print99dan()` 메소드를 호출한다. 이 메소드는 반환값이 없으므로 그냥 호출만 한다.
		// 실행하면 구구단이 콘솔에 존나게 출력될 거다.
		m.print99dan(); 

		// 2. `add` 메소드 호출 및 결과 출력
		System.out.println(m.add(2, 3)); // 'm' 객체의 `add(2, 3)` 메소드를 호출한다.
										// `2`와 `3`이 인자로 넘어가서 `add` 메소드의 매개변수 `x`와 `y`에 각각 대입된다.
										// `add` 메소드는 2+3=5를 계산해서 '5'를 반환한다.
										// `System.out.println()`이 그 반환된 값 '5'를 화면에 존나게 출력한다.
	}
}
