package com.objectex; // 이 코드 덩어리가 속한 폴더(패키지) 이름이다.

/*
  Variables 클래스: **자바 변수 종류별 특징을 존나게 파헤치는 예제다!**
 
  핵심:
  ----------------------------------------------------------------------------------
 종류         | 선언 위치                       | 생성 시기                      | 특징 (존나 중요!)
----------------------------------------------------------------------------------
  클래스 변수  | 클래스 영역                     | 클래스가 메모리에 로딩될 때    | 모든 객체가 ★공유★함 (static 붙음)
  인스턴스 변수 | 클래스 영역                     | 인스턴스(객체) 생성될 때      | 객체마다 ★독립적★인 값 가짐
  지역 변수    | 메서드, 생성자, 초기화 블록 내부 | 변수 선언문 실행될 때         | 선언된 블록 안에서만 유효, 블록 끝나면 소멸
 ----------------------------------------------------------------------------------
 */

public class Variables { // 'Variables'라는 이름의 공개(public) 클래스를 정의한다.

	// ------------- 클래스 영역 변수들 (인스턴스/클래스 변수) ----------

	// 1. 인스턴스 변수 (Instance variable)
	// 'static' 키워드가 안 붙어있고, 클래스 중괄호 안에 선언된 변수다.
	// ★핵심: `Variables` 클래스의 **객체(`new Variables()`)를 만들 때마다** ★각각 다른 `iv`가 생김★.
	// `Variables v1 = new Variables();` 이렇게 'v1'을 만들면 `v1.iv`가 생기고,
	// `Variables v2 = new Variables();` 이렇게 'v2'를 만들면 `v2.iv`가 또 생겨서,
	// 서로 다른 값(`v1.iv`와 `v2.iv`)을 가질 수 있다.
	int iv;

	// 2. 클래스 변수 (Class variable)
	// 'static' 키워드가 붙어있고, 클래스 중괄호 안에 선언된 변수다. (다른 이름: static 변수, 공유 변수)
	// ★개중요★ 이 변수는 'Variables' 클래스가 메모리에 **★딱 한 번 로딩될 때★** 만들어진다.
	// `Variables` 객체를 몇 개를 만들든 상관없이, 모든 객체가 이 `cv` 변수를 **★공유★**한다.
	// 즉, `v1.cv`랑 `v2.cv`는 결국 같은 메모리 공간을 가리킨다.
	// 그래서 한 객체에서 `cv`의 값을 바꾸면, 다른 모든 객체에서도 바뀐 값을 보게 된다!
	static int cv; 

	// --------------------------------------------

	// 3. 지역 변수 (Local variable)
	// `method()`라는 메소드의 블록(`{ ... }`) 안에 선언된 변수다.
	// ★주의★ 이 `iv`는 위의 인스턴스 변수 `iv`랑 **이름만 같지, ★완전히 다른 변수★다!**
	// 이 `iv`는 `method()`가 호출돼서 `int iv = 0;` 이 코드가 실행될 때 만들어지고,
	// `method()` 실행이 끝나면 자동으로 사라진다. `method()` 안에서만 쓸 수 있다.
	void method() {
		int iv = 0; // 지역 변수
		System.out.println("지역 변수 iv: " + iv); // 지역 변수 iv 사용
		// System.out.println("인스턴스 변수 iv (접근 불가): " + this.iv); // 이 메소드에서 `this.iv`로 인스턴스 변수에 접근 가능
		// System.out.println("클래스 변수 cv: " + Variables.cv); // 클래스 변수 cv 사용
	}

	// ★★★ 프로그램 시작점 (메인 메소드) ★★★
	public static void main(String[] args) {
		// 인스턴스 변수(`iv`)에 접근하려면 객체를 만들어야 한다.
		Variables v1 = new Variables();
		Variables v2 = new Variables();

		v1.iv = 10; // v1 객체의 인스턴스 변수 iv에 10 저장
		v2.iv = 20; // v2 객체의 인스턴스 변수 iv에 20 저장
		System.out.println("v1.iv: " + v1.iv); // 10 출력
		System.out.println("v2.iv: " + v2.iv); // 20 출력

		// 클래스 변수(`cv`)는 객체 없이 클래스 이름으로 바로 접근 가능하고, 모든 객체가 공유한다.
		Variables.cv = 100; // 클래스 변수 cv에 100 저장
		System.out.println("Variables.cv: " + Variables.cv); // 100 출력
		
		v1.cv = 200; // v1을 통해 클래스 변수 cv에 200 저장 (모든 객체에 영향 줌)
		System.out.println("Variables.cv (v1을 통해 변경 후): " + Variables.cv); // 200 출력
		System.out.println("v2.cv (v1 변경 후): " + v2.cv); // v2를 통해서도 변경된 200이 보임! (공유의 힘!)

		// 지역 변수는 해당 메소드 안에서만 존재한다.
		Variables v = new Variables();
		v.method(); // method() 호출 시 지역 변수 iv가 생성되고 사용됨.
	}
}
