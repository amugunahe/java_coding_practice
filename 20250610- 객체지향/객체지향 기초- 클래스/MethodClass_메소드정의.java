package com.objectex; // 이 코드가 속한 폴더(패키지) 이름이다.

/*
 MethodClass 클래스: **메소드(Method)가 뭔지, 어떻게 만드는지, 왜 쓰는지 존나게 보여주는 예제다!**
 
 핵심:
  - **메소드란?**
  - 특정 작업을 수행하는 코드 덩어리다. 수학의 함수랑 존나게 비슷하다!
  - (예: `Math.sqrt(4.0)` → 2.0 나옴. Math 클래스의 sqrt 메소드를 쓴 거다!)
 
  - **메소드 왜 씀? (존나 중요!)**
  1. **높은 ★재사용성★:** 한 번 만들어두면 필요할 때마다 존나게 불러 쓸 수 있다! (코드를 복붙할 필요가 없다!)
  2. **★중복 코드 제거★:** 똑같은 코드를 여러 번 쓰는 대신, 메소드 하나 만들어서 깔끔하게 쓴다!
  3. 프로그램 **★구조화★:** 복잡한 프로그램을 작은 단위로 쪼개서 만들 수 있어서 존나 보기 좋고 관리하기도 편하다!
 */

public class MethodClass { // 'MethodClass'이라는 이름의 공개(public) 클래스를 정의한다.

	// ★★★ 1. 배열을 화면에 출력하는 메소드: `printArr` ★★★
	// `static`은 "이 메소드는 클래스 거니까, 객체(인스턴스) 안 만들어도 바로 쓸 수 있어!" 라는 뜻이다. (존나 편함!)
	// `void`는 "이 메소드는 작업만 하고, 아무 값도 안 돌려줘!" 라는 의미다. (그냥 출력만 하고 끝!)
	// `int[] numArr`는 "int형 배열 하나를 입력(매개변수)으로 받을 거야!" 라는 뜻이다.
	static void printArr(int[] numArr) {
		for (int i = 0; i < 10; i++) { // 배열 0번부터 9번 인덱스까지 (총 10개) 반복.
			System.out.print(numArr[i] + " "); // 각 요소를 출력하고 한 칸 띄운다.
		}
		System.out.println(); // 한 줄 다 출력하면 줄 바꿈.
	}

	// ★★★ 2. 배열을 랜덤 값으로 초기화하는 메소드: `initArr` ★★★
	// (니 코드에 `intiArr`라고 오타가 있었는데, `initArr`로 존나게 고쳤다! 보통 이렇게 쓴다, 씨발!)
	// 얘도 `static`이고 `void`다. 정수형 배열 받는다.
	static void initArr(int[] numArr) { // (작명 센스 보소... 보통 `initArr`로 쓴다 이기.)
		for (int i = 0; i < 10; i++) {
			// `Math.random()`: 0.0 이상 1.0 미만의 랜덤 실수 나옴.
			// `* 10`: 0.0 이상 10.0 미만의 실수가 된다.
			// `(int)`: 소수점 버리고 0~9 사이의 랜덤 정수 됨.
			numArr[i] = (int)(Math.random() * 10); // 배열 각 칸에 0~9 랜덤 정수 채워 넣음.
		}
	}

	// ★★★ 3. 메인 메소드: 프로그램 시작점이다! (무조건 여기부터 봄!) ★★★
	public static void main(String[] args) {

		int [] arr = new int[10]; // 10개의 정수를 저장할 수 있는 'arr'이라는 이름의 배열을 만든다.

		// ★★★ 메소드 호출 예시 (메소드 쓰는 이유가 명확히 보임!) ★★★

		// `initArr` 메소드 호출: `arr` 배열에 랜덤 값 채움.
		initArr(arr); // 코드 존나 간결해지지? `initArr` 메소드가 `arr`을 랜덤 숫자로 꽉 채워준다!

		// `printArr` 메소드 호출: `arr` 배열 내용 화면에 출력.
		printArr(arr); // 재사용성 봐라 이기! 똑같은 코드 또 안 쓰고 그냥 메소드 이름만 부르면 됨.
		printArr(arr); // 같은 배열 또 출력! (재사용성 개꿀!)
		printArr(arr); // 또 출력! 개꿀!
	}
}
