package com.objectex; // 이 코드가 속한 폴더(패키지) 이름이다.

/*
  ReferenceParamEx01 클래스: **자바의 '참조형 매개변수(Pass by Reference)' 개념을 존나게 명확하게 보여주는 예제다!**
 
  핵심:
  - **'기본형 매개변수(Pass by Value)' vs '참조형 매개변수(Pass by Reference)' (존나 중요!)**
  - **기본형 (int, double, boolean 등):** 메소드에 값을 넘겨주면, 그 '값'을 복사해서 넘겨준다. 메소드 안에서 값을 바꿔도 원본에는 영향 없다!
  - **참조형 (객체, 배열 등):** 메소드에 객체를 넘겨주면, 객체 자체가 아니라 '객체가 저장된 메모리 주소(참조값)'를 복사해서 넘겨준다.
  -> 메소드 안에서 그 '주소'를 통해 원본 객체의 내용을 바꾸면, ★원본 객체의 내용이 직접 바뀐다!★ (이게 존나 핵심이다!)
  - **`Data` 클래스:** 간단하게 `int x`라는 멤버 변수 하나만 가진다. 이 클래스의 객체를 통해 참조형 매개변수를 테스트할 거다.
  - **`change()` 메소드:** `Data` 객체를 매개변수로 받아서 그 객체의 `x` 값을 변경한다.
  - **`main()` 메소드:** `Data` 객체를 만들고, `change()` 메소드에 넘겨준 후, 객체의 값이 어떻게 변하는지 확인한다.
 */

// --- Data 클래스: 간단한 객체 설계도 ---
// int형 멤버 변수 'x' 하나를 가진다.
class Data { // 'Data'라는 이름의 클래스를 정의한다.
	int x; // int형 멤버 변수 'x'. 'Data' 객체 만들 때마다 자신만의 'x'를 가짐.
}

public class ReferenceParamEx01 { // 'ReferenceParamEx01'라는 이름의 공개(public) 클래스를 정의한다.

	// ★★★ 1. `change` 메소드 정의 (참조형 매개변수 테스트!) ★★★
	// `static`이라 객체 생성 없이 바로 호출 가능.
	// `void`라 반환값 없음.
	// 'Data d' ← 여기가 바로 **★참조형 매개변수★** 부분이다!
	// 뜻: "Data 클래스 객체 하나를 받을 건데, 객체의 '메모리 주소'를 복사해서 받을 거야!"
	static void change(Data d) { // 매개변수 `d`는 `main` 메소드의 `d`와 **★같은 객체를 가리킨다!★**
		
		d.x = 1000; // 매개변수 `d`가 가리키는 객체의 `x` 값을 1000으로 변경한다.
					// ★개중요★ `main` 메소드의 `d` 변수와 `change` 메소드의 `d` 변수는 서로 다른 변수지만,
					// **둘 다 ★같은 메모리 주소를 보고 있으니까**,
					// 여기서 `x` 값을 바꾸면 `main` 메소드에 있는 그 **원본 객체 자체의 `x` 값이 ★직접 바뀐다!★**
		
		System.out.println("change() : x => " + d.x); // `change` 메소드 안에서 변경된 `d.x` 값 출력.
													 // 출력 예상: "change() : x => 1000"
	}
	
	// ★★★ main 메소드: 프로그램의 시작점! ★★★
	public static void main(String[] args) { // 'main' 메소드는 항상 'public static void'로 선언된다.
		
		// 1. Data 클래스 객체 생성
		// `new Data()` 하면 메모리에 'Data' 객체가 만들어진다. (이 객체 안에는 `int x`가 있다.)
		// 이 객체의 메모리 '주소'가 `d`라는 변수에 저장된다.
		Data d = new Data();
		
		// 2. 객체 `d`의 `x` 값 초기화
		d.x = 10; // `d`가 가리키는 객체의 멤버 변수 `x`에 10을 저장한다.
		
		System.out.println("main() : x => " + d.x); // `main` 메소드에서 현재 `d.x` 값 출력.
												 // 출력 예상: "main() : x => 10"

		// 3. `change()` 메소드 호출 (핵심!)
		// `change(d);` → `d` 변수 (Data 객체의 메모리 주소)를 `change` 메소드로 넘겨준다.
		// 여기서 중요한 건: `main`의 `d`에 담긴 '주소 값'이 `change` 메소드의 매개변수 `d`에 '복사'된다.
		// 즉, 두 `d`는 '다른 변수'지만, **★'같은 객체'를 가리키게 된다!★**
		
		change(d); // `change` 메소드가 호출되고, 그 안에서 `x`의 값을 1000으로 변경할 거다.
				   // (주소 복사라 원본 객체 값이 변경됨!)
		
		// 4. `change()` 메소드 호출 후 `main` 메소드에서 `x` 값 확인
		System.out.println("main() : x => " + d.x); // `change` 메소드 호출 후 `main`에서 다시 `d.x` 값 출력.
												 // `change` 메소드에서 `d.x` 값이 1000으로 바뀌었으니,
												 // 여기서도 `d.x` 값은 **★1000이 되어 있다!★**
												 // 출력 예상: "main() : x => 1000"
		
	}
}
