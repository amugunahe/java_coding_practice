package com.objectex; // 이 코드는 'com.objectex'라는 패키지에 속해 있어. 자바에서 파일들을 묶어두는 폴더 같은 개념이지.

// Tv 클래스가 어떻게 생겼는지 가정하는 주석이야.
// 보통 이런 식으로 채널 값을 저장하고, 채널을 설정하거나 읽어오는 메소드를 가질 거야.
// class Tv {
//    private int channel; // 채널 값을 저장하는 '인스턴스 변수'야. Tv 객체마다 자기만의 채널 값을 가질 수 있어.
//    public Tv() { // Tv 객체를 새로 만들 때(생성자 호출될 때) 실행되는 부분이야.
//        channel = 0; // 채널을 기본값 0으로 초기화해줘.
//    }
//    public int getChannel() { // 현재 채널 값을 '읽어오는' 메소드야.
//        return channel;
//    }
//    public void setChannel(int ch) { // 채널 값을 '설정하는' 메소드야.
//        channel = ch; // 넘겨받은 'ch' 값을 'channel' 변수에 저장해.
//    }
// }

public class TvExam02 { // 'TvExam02'라는 이름의 클래스야. 여기서 Tv 객체를 만들고 가지고 놀 거다 

    public static void main(String[] args) { // ★★★ main 메소드: 여기가 프로그램의 시작점이야! ★★★
                                             // 자바 프로그램은 무조건 여기서부터 코드를 실행해.

        /*
         * 'Tv t1;' : 'Tv' 타입의 변수 't1'을 선언한 거야. 아직 Tv 객체랑 연결된 건 아니고,
         * 나중에 Tv 객체의 '주소'를 저장할 공간을 마련해둔 거라고 생각하면 돼.
         * 't1 = new Tv();' : 'new Tv()' 명령어로 메모리에 새로운 Tv 객체를 하나 만드는 거야.
         * 그리고 그 새로 만들어진 객체의 '주소'를 't1' 변수에 저장하는 거지.
         * 이 두 줄은 아래처럼 한 줄로 줄여서 많이 쓴다
         */

        // 1. 첫 번째 Tv 객체 생성
        // 'Tv t1 = new Tv();' : 새로운 Tv 객체 하나를 메모리 공간에 만들고, 그 객체의 ★주소★를 't1'이라는 변수에 저장해.
        // 이제 't1'은 자신만의 채널 값을 가지게 돼. (Tv 클래스 생성자에 의해 기본적으로 0으로 초기화됨)
        Tv t1 = new Tv();

        // 2. 두 번째 Tv 객체 생성
        // 'Tv t2 = new Tv();' : 't1'과는 **완전히 별개인** 또 다른 새로운 Tv 객체 하나를 메모리에 만들고,
        //                     그 객체의 ★주소★를 't2'라는 변수에 저장해.
        // 't2'도 't1'과 독립적으로 자기만의 채널 값을 가진다
        // 이 시점에서 't1'과 't2'는 서로 다른 두 개의 Tv 객체를 각각 가리키고 있는 상태야.

        // 3. 초기 채널 값 확인
        // Tv 객체를 만들면 채널이 기본값 0으로 초기화된다고 가정하고 출력해볼 거야.
        System.out.println("t1의 채널 값은 " + t1.getChannel() + "입니다."); // 결과: "t1의 채널 값은 0입니다."
        System.out.println("t2의 채널 값은 " + t2.getChannel() + "입니다."); // 결과: "t2의 채널 값은 0입니다."
        
        System.out.println("--- t2 = t1 실행 전 ---"); // 설명을 위한 구분선 출력.
        // (가상의 메모리 상태를 상상해보자!)
        // 't1' 변수 --- (주소 @100) ---> [Tv 객체 A (channel: 0)]  <- 실제 Tv 객체
        // 't2' 변 --- (주소 @200) ---> [Tv 객체 B (channel: 0)]  <- 또 다른 실제 Tv 객체

        // 4. ★★★ 참조 변수 't2'에 't1'의 주소 값 복사 (존나 중요!) ★★★
        t2 = t1; // **이 줄이 이 코드의 핵심이야!**
                 // 't1' 변수가 가지고 있는 'Tv 객체 A의 주소 값'을 't2' 변수에 **복사**해서 저장하는 거야.
                 // 이렇게 되면 't2'는 이전에 가리키던 'Tv 객체 B'를 더 이상 가리키지 않아.
                 // 대신, 't1'이 가리키는 것과 **똑같은 'Tv 객체 A'**를 가리키게 되는 거지.
                 // (이전에 't2'가 가리키던 'Tv 객체 B'는 이제 아무도 가리키지 않게 되고, 나중에 자바의 '가비지 컬렉터'라는 애가 알아서 메모리에서 치워버릴 수 있어.)

        System.out.println("--- t2 = t1 실행 후 ---"); // 설명을 위한 구분선 출력.
        // (변경된 가상의 메모리 상태)
        // 't1' 변 --- (주소 @100) ---> [Tv 객체 A (channel: 0)]
        //              ^                  ^
        // 't2' 변 -----|                  | (둘 다 같은 객체를 가리킴!)

        // 5. 't1'이 가리키는 객체의 채널 값 변경
        t1.setChannel(7); // 't1'이 가리키고 있는 Tv 객체(바로 그 '객체 A')의 채널 값을 7로 바꿔.
        System.out.println("t1의 채널 값을 " + t1.getChannel() + "로 변경되었습니다."); // 결과: "t1의 채널 값을 7로 변경되었습니다."
        
        System.out.println("--- t1.setChannel(7) 실행 후 ---"); // 설명을 위한 구분선 출력.
        // (또 다시 변경된 가상의 메모리 상태)
        // 't1' 변 --- (주소 @100) ---> [Tv 객체 A (channel: 7)]  <- 객체 A의 채널이 7로 바뀜!
        //              ^                  ^
        // 't2' 변 -----|                  | (여전히 둘 다 같은 객체를 가리킴!)

        // 6. 't1'과 't2'의 채널 값 최종 확인
        System.out.println("t1의 채널 값은 " + t1.getChannel() + "입니다."); // 결과: "t1의 채널 값은 7입니다."
        // 't1'은 여전히 '객체 A'를 가리키고 있고, '객체 A'의 채널은 아까 7로 바뀌었으니 7이 출력돼.

        System.out.println("t2의 채널 값은 " + t2.getChannel() + "입니다."); // 결과: "t2의 채널 값은 7입니다."
        // **★★★존나 중요!★★★** 't2'도 현재 '객체 A'를 가리키고 있지?
        // 그래서 't1'이 '객체 A'의 채널을 7로 바꿨기 때문에,
        // 't2'를 통해서 '객체 A'의 채널을 확인해도 변경된 값인 7이 출력되는 걸 볼 수 있는 거다
        // 이게 바로 **참조 변수의 '주소 값 복사'의 핵심 개념**이야. 두 변수가 같은 대상을 보게 되는 거지.
    }
}
