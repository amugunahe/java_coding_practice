package com.objectex; // 이 코드는 'com.objectex'라는 패키지에 속해 있어. 자바에서 파일들을 종류별로 묶어두는 폴더 같은 개념이야.

/*
  ★★★ 객체 배열 (Object Array) ★★★
  - 수많은 객체를 한 번에 관리할 때 쓰는 방식이야.
  - 객체 배열 안에는 실제 객체가 통째로 저장되는 게 아니야.
  대신, ★객체의 '주소'(메모리 위치)★가 저장된다는 걸 꼭 기억해야 해.
  - 쉽게 말해, 객체 배열은 '참조 변수'들을 한 줄로 묶어놓은 '참조 변수 배열'인 셈이지.
 
  (예시)
  Tv t1, t2, t3; // Tv 타입의 참조 변수 3개를 각각 선언한 거야.
 
 Tv[] tvArr = new Tv[3]; // 위처럼 따로 선언하는 대신,
  // 길이가 3인 'Tv 참조 변수를 묶은 배열'을 선언한 거지.
  // 이 시점에는 아직 실제 Tv 객체가 만들어진 게 아니야!
 
 // 객체를 생성해서 배열의 각 요소에 저장하는 방법 (여기서 진짜 객체가 만들어짐!)
  tvArr[0] = new Tv(); // 첫 번째 요소(참조 변수)가 새로운 Tv 객체의 주소를 가리키게 돼.
  tvArr[1] = new Tv();
  tvArr[2] = new Tv();
 
  // 배열 선언과 동시에 객체 생성 및 초기화하는 방법도 있어.
  Tv[] tvArr = {new Tv(), new Tv(), new Tv()};
 
  // 반복문을 이용한 객체 생성 및 배열 저장 (실무에서 제일 많이 쓰는 방법이야!)
  Tv[] tvArr = new Tv[100]; // 100개짜리 Tv 참조 변수 배열 선언
  for (int i = 0; i < tvArr.length; i++) {
  tvArr[i] = new Tv(); // 각 배열 요소에 새로운 Tv 객체를 만들어서 할당하는 거지.
  }
 
  클래스: 사용자 정의 타입(자료형)이라고 생각하면 돼. 'Tv'라는 새로운 타입을 우리가 만든 거나 다름 없어.
 */

// Tv 클래스가 어떻게 생겼는지 가정하는 주석이야.
// 이 코드를 실행하려면 이 Tv 클래스가 같은 패키지 안에 정의되어 있어야 해.
// class Tv {
//    int channel; // 채널 값을 저장할 인스턴스 변수야. 각 Tv 객체마다 자기만의 채널 값을 가질 거야.
//    Tv() { // 생성자야. Tv 객체를 'new Tv()' 할 때 자동으로 호출돼.
//        channel = 0; // 채널을 0으로 초기화해주는 역할을 해.
//    }
//    void channelUp() { // 채널을 1 증가시키는 메소드야.
//        channel++;
//    }
//    void channelDown() { // 채널을 1 감소시키는 메소드 (예시)
//        channel--;
//    }
// }

public class TvExam03 { // 'TvExam03'이라는 이름의 클래스야. 여기서 Tv 객체 배열을 만들고 조작해볼 거야.

    public static void main(String[] args) { // ★★★ main 메소드: 여기가 프로그램의 시작점이야! ★★★
                                             // 자바 프로그램은 무조건 여기서부터 코드를 실행한다.

        // 1. 길이가 3인 Tv 객체 배열 선언
        // 'Tv[] tvArr = new Tv[3];'
        // 이 코드를 실행하면, 'tvArr'이라는 이름의 배열 공간이 메모리에 만들어져.
        // 이 배열은 Tv 객체의 '주소'를 3개 저장할 수 있는 공간인 거지.
        // ★하지만 이 시점에는 아직 실제 Tv 객체가 만들어진 게 아니라는 거!★
        // 배열의 각 요소인 `tvArr[0]`, `tvArr[1]`, `tvArr[2]`는 현재 `null` (아무것도 가리키지 않음) 값을 가지고 있어.
        Tv[] tvArr = new Tv[3];
        
        // (가상의 메모리 상태)
        // tvArr 변수 --- (배열 주소) ---> [ null | null | null ] (배열 칸만 생기고 아직 실제 Tv는 없음)

        // 2. ★★★ Tv 객체를 생성해서 배열의 각 요소에 저장 (존나 중요!) ★★★
        // 이 'for' 반복문 안에서 비로소 실제 'Tv' 객체들이 하나씩 만들어지는 거야.
        // 그리고 그 객체들의 주소가 배열의 각 칸에 저장되는 거지.
        for (int i = 0; i < tvArr.length; i++) {
            // 'tvArr[i] = new Tv();'
            // 'new Tv()' 명령어로 새로운 Tv 객체를 메모리에 만들고,
            // 그 객체의 '주소'를 `tvArr[i]` (배열의 첫 번째, 두 번째, 세 번째 칸)에 저장해.
            tvArr[i] = new Tv(); // 이제 각 배열 요소가 독립적인 Tv 객체를 가리키게 된다!

            // 'tvArr[i].channel = i + 10;'
            // `tvArr[i]`가 가리키는 (즉, 배열의 i번째 칸에 저장된 주소에 있는) Tv 객체의
            // `channel` 멤버 변수에 값을 할당하는 거야.
            // i가 0일 때: tvArr[0] 객체의 channel은 10 (0 + 10)
            // i가 1일 때: tvArr[1] 객체의 channel은 11 (1 + 10)
            // i가 2일 때: tvArr[2] 객체의 channel은 12 (2 + 10)
            tvArr[i].channel = i + 10;
        }

        // (가상의 메모리 상태)
        // tvArr 변 --- (배열 주소) ---> [ 주소A | 주소B | 주소C ]
        //                                |       |       |
        //                                V       V       V
        //                            [Tv 객체 A (channel: 10)]  <- 독립적인 객체 1
        //                            [Tv 객체 B (channel: 11)]  <- 독립적인 객체 2
        //                            [Tv 객체 C (channel: 12)]  <- 독립적인 객체 3
        
        // 3. 배열에 저장된 각 Tv 객체의 메소드 호출 및 값 확인
        for (int i = 0; i < tvArr.length; i++) {
            // 'tvArr[i].channelUp();'
            // `tvArr[i]`가 가리키는 Tv 객체(i번째 Tv 객체)의 `channelUp()` 메소드를 호출해.
            // 이 메소드는 해당 객체의 `channel` 값을 1 증가시키는 역할을 해.
            // i가 0일 때: tvArr[0] 객체의 channel (10)이 11로 증가
            // i가 1일 때: tvArr[1] 객체의 channel (11)이 12로 증가
            // i가 2일 때: tvArr[2] 객체의 channel (12)이 13으로 증가
            tvArr[i].channelUp();

            // 변경된 채널 값을 출력해볼 거야.
            System.out.println("tvArr[" + i + "]:" + tvArr[i].channel);
            // 결과:
            // tvArr[0]:11
            // tvArr[1]:12
            // tvArr[2]:13
        }
    }
}
