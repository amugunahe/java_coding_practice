package com.functionex; // 이 코드가 속한 패키지(폴더)를 정의합니다.
                      // 'com.functionex'라는 이름의 폴더 안에 이 Add.java 파일이 있다고 생각하면 돼요.

public class Add { // 'Add'라는 이름의 클래스를 정의합니다.
                   // 'public'은 이 클래스를 어디서든 사용할 수 있다는 의미예요.
                   // 클래스는 일종의 '설계도' 또는 '틀'이라고 생각하시면 됩니다.
                   // 이 설계도를 바탕으로 실제 '객체(object)'를 만들어서 사용할 수 있어요.

    // 1. 멤버 변수 (속성) 선언:
    //    'private'은 이 변수들이 'Add' 클래스 안에서만 접근(사용)할 수 있다는 의미예요.
    //    밖에서는 직접 건드릴 수 없고, 나중에 배울 '메서드(method)'를 통해서만 간접적으로 조작할 수 있게 만들어서
    //    코드를 더 안전하고 체계적으로 관리할 수 있게 해줍니다.
	
    private int a; // 'a'라는 이름의 정수형(int) 변수를 선언했습니다. 이 클래스의 '속성'이 됩니다.
    private int b; // 'b'라는 이름의 정수형(int) 변수를 선언했습니다. 이 클래스의 또 다른 '속성'이 됩니다.

    // --- setValue 메서드 ---
    // 이 메서드는 'Add' 객체의 'a'와 'b' 변수에 값을 설정(저장)하는 역할을 합니다.
    public void setValue(int a, int b) {
        // 'public': 이 메서드를 어디서든 호출할 수 있습니다.
        // 'void': 이 메서드는 어떤 값도 반환(return)하지 않습니다. 그저 'a'와 'b'에 값을 설정하는 '작업'만 수행해요.
        // 'setValue': 메서드의 이름입니다. '값을 설정한다'는 의미죠.
        // '(int a, int b)': 이 메서드가 작업을 수행하기 위해 필요한 입력 값(매개변수)입니다.
        //                   여기서 받는 'a'와 'b'는 메서드 안에서만 유효한 임시 변수라고 생각하세요.

        // 'this.a = a;':
        //    여기서 'this.a'는 'Add' 클래스 바로 위에 선언된 멤버 변수 'a'를 의미합니다. (초록색 부분)
        //    'a'는 'setValue' 메서드가 입력받은 임시 변수 'a'를 의미합니다. (주황색 부분)
        //    즉, 'setValue'로 전달받은 'a' 값을 이 객체의 멤버 변수 'a'에 저장하라는 뜻입니다.
        this.a = a;

        // 'this.b = b;': 위와 동일하게, 전달받은 'b' 값을 이 객체의 멤버 변수 'b'에 저장합니다.
        this.b = b;
    }

    // --- calculate 메서드 ---
    // 이 메서드는 'Add' 객체에 저장된 두 수('a'와 'b')를 더해서 그 결과를 반환(return)하는 역할을 합니다.
    public int calculate() {
        // 'public': 이 메서드를 어디서든 호출할 수 있습니다.
        // 'int': 이 메서드가 반환할 값의 타입이 '정수형(int)'임을 나타냅니다.
        //        두 정수를 더한 결과는 정수이므로 'int'를 반환합니다.
        // 'calculate': 메서드의 이름입니다. '계산한다'는 의미죠.
        // '()': 이 메서드는 작업을 수행하기 위해 별도의 입력 값(매개변수)이 필요 없습니다.
        //       이미 이 객체 안에 'a'와 'b' 값이 저장되어 있기 때문입니다.

        // 'return a + b;':
        //    이 객체의 멤버 변수 'a'와 'b'를 더한 결과를 호출한 곳으로 돌려줍니다.
        return a + b;
    }
}
