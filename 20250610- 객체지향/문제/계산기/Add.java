package com.overex; // 이 코드가 속한 폴더(패키지) 이름이다.

// --- Rect 클래스: 사각형 객체의 설계도 ---
// 사각형의 너비, 높이, 그리고 넓이를 계산하고 출력하는 기능을 담당한다.
class Rect {

	// 1. 멤버 변수 (속성)
	private int w, h; // ★★★ 존나 중요! 'private'이라 이 Rect 클래스 안에서만 직접 쓸 수 있다. ★★★
					  // w(너비), h(높이)를 저장한다. Rect 객체를 만들 때마다 자기만의 w, h를 가진다.

	// 2. 사각형 넓이 계산 메서드
	public int area() { // 매개변수 없음. 자기 객체의 w, h를 사용한다.
		return w * h; // 멤버 변수 w, h를 곱해서 넓이를 반환한다. (this.w * this.h 라고 써도 똑같다!)
	}

	// 3. 결과 출력 메서드
	public void write(int result) {
		System.out.println("결과: " + result); // 계산된 넓이를 출력한다.
	}

	// 4. 너비, 높이 값 설정 메서드 (★★★ `this` 키워드 사용! 존나 중요! ★★★★)
	public void setData(int w, int h) { // 매개변수 w, h는 이 메소드 안에서만 유효한 '지역 변수'다.
		this.w = w; // ★★★ 'this.w'는 클래스의 '멤버 변수 w'를 의미한다! ★★★
					// 그냥 'w'는 매개변수로 넘어온 '지역 변수 w'다.
					// 이렇게 이름이 같을 때 `this`를 써서 멤버 변수임을 존나 명확히 한다!
		this.h = h; // 'this.h'는 클래스의 '멤버 변수 h'다.
					// 매개변수로 넘어온 '지역 변수 h'의 값을 멤버 변수 h에 대입한다.
	}

} // Rect 클래스 끝

// --- ThisEx 클래스: 프로그램 실행 시작점 ---
// Rect 객체를 만들어서 메소드들을 활용해보고, `this`의 역할을 확인한다.
public class ThisEx {

	// ★★★ 프로그램 시작점 (메인 메소드) ★★★
	public static void main(String[] args) {

		// 1. Rect 객체('사각형' 객체) 생성
		// 'new Rect()'를 하면 메모리에 실제 사각형 객체가 만들어지고, 'r' 변수가 이 객체를 가리킨다.
		// 'r'은 자기만의 w, h 변수를 가진다. (초기값은 0이다.)
		Rect r = new Rect();

		// 2. 사각형의 너비, 높이 설정
		r.setData(10, 5); // 'r' 객체의 `setData` 메소드를 호출한다.
						  // `setData` 안에서 `this.w = 10;`, `this.h = 5;` 코드가 실행돼서
						  // 'r' 객체의 멤버 변수 w는 10, h는 5로 존나게 바뀐다.

		// 3. 사각형 넓이 계산
		int a = r.area(); // 'r' 객체의 `area` 메소드를 호출한다.
						  // 'r' 객체의 w(10)와 h(5)로 넓이(50)를 계산한다. 계산값 50이 'a' 변수에 저장된다.

		// 4. 결과 출력
		r.write(a); // 'r' 객체의 `write` 메소드를 호출한다. 'a'의 값(50)을 넘겨준다.
					// "결과: 50"이 화면에 출력된다.
	}
}
