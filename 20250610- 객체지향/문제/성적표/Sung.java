package com.sungex; // 'com.sungex'는 이 자바 파일(클래스)이 속한 패키지 이름입니다.
                    // 이전에 만들었던 'Record' 클래스와 같은 패키지에 있어야 서로를 쉽게 찾아 사용할 수 있습니다.

import java.util.*; // 'java.util' 패키지 안에 있는 모든 유틸리티 클래스들을 가져와 사용하겠다는 의미입니다.
                    // 주로 사용자로부터 키보드 입력을 받기 위한 'Scanner' 클래스를 사용하기 위해 필요합니다.

/*
  이 'Sung' 클래스는 학생들의 성적을 관리하고 처리하는 전체적인 시스템의 설계도입니다.
  사용자로부터 인원수를 입력받고, 각 학생의 이름과 과목별 점수(국어, 영어, 수학)를 입력받아
  총점, 평균을 계산하며, 마지막으로 학생들의 석차를 매기는 기능을 제공합니다.
  계산된 모든 성적 정보는 'Record' 객체 배열에 저장됩니다.
 
  주요 속성:
  - 'inwon': 성적을 관리할 학생들의 총 인원수를 저장합니다.
  - 're[]': 각 학생의 성적 정보(이름, 점수, 총점, 평균, 석차)를 담을 'Record' 객체들의 배열입니다.
 
  주요 기능(메소드):
 - 'set()': 사용자로부터 인원수를 입력받고, 'Record' 배열을 해당 인원수만큼 생성합니다.
 - 'input()': 각 학생의 이름과 과목별 점수를 입력받고, 총점과 평균을 계산하여 'Record' 객체에 저장합니다.
 - 'ranking()': 모든 학생들의 평균 점수를 비교하여 석차를 계산하고 'Record' 객체에 반영합니다.
 - 'print()': (현재 미구현) 계산된 모든 성적 정보(석차 포함)를 출력할 예정입니다.
 */

public class Sung { // 'Sung'이라는 이름의 공개(public) 클래스를 선언합니다.
                     // 이 클래스는 '성적 관리' 프로그램의 핵심 역할을 하는 설계도입니다.

    // --- 주요 멤버 변수 (속성 구성) ---
    // 이들은 'Sung' 클래스 객체가 프로그램 실행 중에 필요한 데이터와 도구들을 저장하는 공간입니다.
    // 'private'이 없어 같은 패키지 내 다른 클래스에서 직접 접근 가능하지만,
    // 보통 데이터 보호를 위해 'private'을 사용하고 Getter/Setter를 만듭니다. (초보자 학습용으로 public 상태 유지)
	int inwon;       // 성적을 처리할 총 '인원수'를 저장하는 정수(int) 변수입니다.
	Record[] re;     // 각 학생의 성적 정보(이름, 점수 등)를 담을 'Record' 객체들의 배열입니다.
                     // 이 배열은 'set()' 메소드에서 'inwon'에 따라 크기가 결정되고 생성됩니다.

    /* 기능(메소드) */

    // --- 1. 인원수 입력 기능 ('set' 메소드) ---
    // 사용자로부터 성적을 처리할 학생들의 총 인원수를 입력받고, 유효성 검사 후 'Record' 배열을 생성합니다.
	public void set() { // 이 메소드는 어떤 값도 반환하지 않고(void), 인원수 설정을 처리합니다.
		Scanner sc = new Scanner(System.in); // 사용자 키보드 입력을 위한 'Scanner' 객체를 생성합니다.

        // 'do-while' 반복문: 인원수를 1부터 100 사이로 제한하기 위한 유효성 검사입니다.
        // 'do' 블록 안의 코드를 먼저 한 번 실행하고, 'while' 조건이 참이면 계속 반복합니다.
	    do {
		    System.out.print("인원수 입력(1 ~ 100): "); // 인원수 입력을 안내합니다.
		    inwon = sc.nextInt(); // 사용자가 입력한 정수(인원수)를 읽어와 'inwon' 변수에 저장합니다.
	    } while(inwon < 1 || inwon > 100); // 'inwon'이 1보다 작거나 100보다 크면(즉, 유효하지 않은 범위이면) 반복합니다.

	    /*
	      'Record' 클래스의 배열 변수 're'를 'inwon'만큼의 크기로 생성하는 부분입니다.
	      중요: 'new Record[inwon]'은 'Record' 객체들을 담을 수 있는 '공간'만 만든 것이지,
	      각 공간에 'Record' 객체 자체를 생성하여 채워 넣은 것은 아닙니다.
	      각 'Record' 객체의 생성(인스턴스화)은 'input()' 메소드에서 별도로 이루어집니다.
	     */
		
	    re = new Record[inwon];
	    // sc.close(); // (참고) 보통 main에서 Scanner를 한 번만 생성하고 메소드에 전달하거나,
	                  // 클래스 전체의 멤버 변수로 두어 한 번만 닫는 것이 일반적입니다.
	                  // 여기서 닫으면 input() 메소드에서 다시 Scanner를 생성해야 합니다.
	}

	// --- 2. 데이터 입력 및 성적 계산 기능 ('input' 메소드) ---
    // 각 학생의 이름과 국어, 영어, 수학 점수를 입력받고, 동시에 총점과 평균을 계산하여 'Record' 객체에 저장합니다.
	public void input() { // 이 메소드는 반환 값이 없습니다(void).

		Scanner sc = new Scanner(System.in); // 사용자 키보드 입력을 위한 'Scanner' 객체를 생성합니다.

		// 과목 점수 입력을 위한 안내 메시지를 배열로 미리 정의합니다.
		String[] title = {"국어점수: ", "영어점수: ", "수학점수: "};

		// 'for' 반복문을 사용하여 'inwon' 수만큼의 학생 데이터를 입력받습니다.
		for (int i = 0; i < inwon; i++) { // 'i'는 학생의 인덱스를 나타냅니다 (0부터 inwon-1까지).

            // 중요: 각 학생마다 새로운 'Record' 객체를 생성(인스턴스화)하여 're' 배열의 'i'번째 칸에 저장합니다.
            // 이렇게 해야 각 학생의 이름, 점수, 총점 등을 독립적으로 저장할 수 있습니다.
			re[i] = new Record();

			System.out.print(i + 1 + "번째 이름: "); // 'i+1'을 사용하여 "1번째 이름: ", "2번째 이름: "과 같이 출력합니다.
			re[i].name = sc.next(); // 'i'번째 'Record' 객체의 'name' 필드에 학생 이름을 저장합니다.

            // --- 과목별 점수 입력 및 총점 계산 ---
            // 중첩 'for' 반복문을 사용하여 각 학생의 세 과목 점수를 입력받고 총점에 더합니다.
			for (int j = 0; j < title.length; j++) { // 'j'는 과목의 인덱스를 나타냅니다 (0:국어, 1:영어, 2:수학).
				System.out.print(title[j]); // 'title' 배열을 사용하여 각 과목의 입력 안내 메시지를 출력합니다. (예: "국어점수: ")

				// 'i'번째 학생의 'j'번째 과목 점수를 're[i].score[j]'에 저장합니다.
				re[i].score[j] = sc.nextInt();

				// 'i'번째 학생의 'sum'에 현재 입력받은 과목 점수를 누적하여 더합니다.
				re[i].sum += re[i].score[j]; // 're[i].sum = re[i].sum + re[i].score[j];'와 같습니다.
			}
            // --- 평균 계산 ---
            // 세 과목 점수의 총점을 3.0으로 나누어 평균을 계산합니다.
            // '3.0'으로 나누는 이유는 정수 나누기(int / int)가 아닌 실수 나누기(int / double)를 하여 소수점 아래까지 정확한 평균을 얻기 위함입니다.
            // (만약 3으로 나누면 결과가 정수가 되어 소수점 이하가 버려집니다.)
			re[i].avg = re[i].sum / 3.0;
		}
	}

	// --- 3. 석차 계산 기능 ('ranking' 메소드) ---
    // 모든 학생들의 평균 점수를 비교하여 석차를 계산하고, 각 'Record' 객체의 'rank' 필드에 저장합니다.
	public void ranking() { // 이 메소드는 반환 값이 없습니다(void).
		int i, j; // 반복문에서 사용할 변수를 선언합니다.

        // --- 모든 학생의 석차를 1로 초기화 ---
        // 모든 학생은 일단 1등이라고 가정하고 시작합니다. (자기보다 높은 점수가 나올 때마다 등수가 밀림)
	    for (i = 0; i < inwon; i++) // 각 학생에 대해 반복합니다.
		    re[i].rank = 1; // 'i'번째 학생의 'rank'를 1로 설정합니다.

        // --- 실제 석차 계산 로직 ---
        // 이중 'for' 반복문을 사용하여 모든 학생 쌍을 비교합니다.
        // 'i'번째 학생의 평균과 'j'번째 학생의 평균을 비교하여 석차를 조정합니다.
	    for (i = 0; i < inwon - 1; i++) { // 첫 번째 학생을 선택합니다. (마지막 학생은 비교할 필요 없음)
		    for (j = i + 1; j < inwon; j++) { // 첫 번째 학생(i) 다음 학생부터 마지막 학생까지 비교합니다.
                // 'i'번째 학생의 평균이 'j'번째 학생의 평균보다 높으면 (i가 j보다 잘함)
			    if (re[i].avg > re[j].avg) {
				    re[j].rank++; // 'j'번째 학생의 등수를 1 증가시킵니다. (j는 i보다 등수가 밀려남)
			    }
                // 'i'번째 학생의 평균이 'j'번째 학생의 평균보다 낮으면 (j가 i보다 잘함)
			    else if (re[i].avg < re[j].avg) {
				    re[i].rank++; // 'i'번째 학생의 등수를 1 증가시킵니다. (i는 j보다 등수가 밀려남)
			    }
                // else: 두 학생의 평균이 같으면 (동점) 서로의 석차를 조정하지 않습니다.
                //      (이 경우 같은 등수가 여러 명 나올 수 있습니다.)
		    }
	    }
    }

	// --- 4. 결과 출력 기능 ('print' 메소드) ---
    // (현재는 'ranking()'만 호출하고 있지만) 모든 학생의 성적 정보(석차 포함)를 화면에 출력하는 역할을 합니다.
	public void print() { // 이 메소드는 반환 값이 없습니다(void).
	    ranking(); // 출력하기 전에 먼저 석차를 정확히 계산합니다. (이 메소드가 호출될 때마다 석차를 다시 계산)

        // TODO: 여기에 실제 성적 정보를 표 형태로 출력하는 코드를 추가해야 합니다.
        // 예시:
        // System.out.println("이름\t국어\t영어\t수학\t총점\t평균\t석차");
        // System.out.println("--------------------------------------------------");
        // for (int k = 0; k < inwon; k++) {
        //     System.out.printf("%s\t%d\t%d\t%d\t%d\t%.2f\t%d\n",
        //         re[k].name, re[k].score[0], re[k].score[1], re[k].score[2],
        //         re[k].sum, re[k].avg, re[k].rank);
        // }
    }

    // --- 메인 메소드(main method) ---
    // 이 클래스 자체는 독립적으로 실행될 수 없으므로,
    // 이 클래스를 활용하는 다른 'main' 메소드를 가진 클래스(예: SungExApp.java)에서
    // 'Sung' 객체를 생성하고 이 메소드들을 호출하여 프로그램을 실행해야 합니다.
    // (지금 이 Sung.java 파일에는 main 메소드가 없습니다.)
} // Sung 클래스 종료
