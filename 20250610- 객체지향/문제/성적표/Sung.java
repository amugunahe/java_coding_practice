package com.sungex; // 'com.sungex'는 이 자바 파일(클래스)이 속한 패키지 이름이다.
                     // 이전에 만들었던 'Record' 클래스와 같은 패키지에 있어야 서로를 쉽게 찾아 사용할 수 있다.

import java.util.*; // 'java.util' 패키지 안에 있는 모든 유틸리티 클래스들을 가져와 사용하겠다는 의미다.
                     // 주로 사용자로부터 키보드 입력을 받기 위한 'Scanner' 클래스를 사용하기 위해 존나게 필요하다.

/*
  Sung 클래스: **학생들의 성적을 관리하고 처리하는 전체적인 시스템의 존나 중요한 설계도다!**
 
  핵심:
  - **목표:** 사용자로부터 인원수를 입력받고, 각 학생의 이름과 과목별 점수(국어, 영어, 수학)를 입력받아
  총점, 평균을 계산하며, 마지막으로 학생들의 석차를 매기는 기능을 제공한다.
  - **`Record` 클래스 활용:** 계산된 모든 성적 정보는 `Record` 객체 배열(`re[]`)에 저장된다!
  (즉, `Record`는 '성적 기록 하나'의 설계도고, `Sung`은 '여러 성적 기록'을 관리하는 설계도다!)
 
  주요 속성 (멤버 변수):
  - `inwon`: 성적을 관리할 학생들의 총 인원수를 저장한다.
  - `re[]`: 각 학생의 성적 정보(이름, 점수, 총점, 평균, 석차)를 담을 'Record' 객체들의 배열이다.
 
  주요 기능 (메소드):
  - `set()`: 사용자로부터 인원수를 입력받고, `Record` 배열을 해당 인원수만큼 생성한다.
  - `input()`: 각 학생의 이름과 과목별 점수를 입력받고, 총점과 평균을 계산하여 `Record` 객체에 저장한다.
  - `ranking()`: 모든 학생들의 평균 점수를 비교하여 석차를 계산하고 `Record` 객체에 반영한다.
  - `print()`: 계산된 모든 성적 정보(석차 포함)를 표 형태로 존나게 깔끔하게 출력한다! (이전에 미구현이었던 부분 구현함!)
 */

public class Sung { // 'Sung'이라는 이름의 공개(public) 클래스를 선언한다.
                     // 이 클래스는 '성적 관리' 프로그램의 핵심 역할을 하는 설계도다.

    // --- 주요 멤버 변수 (속성 구성) ---
    // 이들은 'Sung' 클래스 객체가 프로그램 실행 중에 필요한 데이터와 도구들을 저장하는 공간이다.
    // 'private'이 없어 같은 패키지 내 다른 클래스에서 직접 접근 가능하지만,
    // 보통 데이터 보호를 위해 'private'을 사용하고 Getter/Setter를 만드는 것이 존나게 좋은 습관이다. (초보자 학습용으로 public 상태 유지)
	int inwon;       // 성적을 처리할 총 '인원수'를 저장하는 정수(int) 변수다.
	Record[] re;     // 각 학생의 성적 정보(이름, 점수 등)를 담을 'Record' 객체들의 배열이다.
                     // 이 배열은 `set()` 메소드에서 'inwon'에 따라 크기가 결정되고 생성된다.

    /* 기능(메소드) */

    // --- 1. 인원수 입력 기능 (`set` 메소드) ---
    // 사용자로부터 성적을 처리할 학생들의 총 인원수를 입력받고, 유효성 검사 후 'Record' 배열을 생성한다.
	public void set() { // 이 메소드는 어떤 값도 반환하지 않고(void), 인원수 설정을 처리한다.
		Scanner sc = new Scanner(System.in); // 사용자 키보드 입력을 위한 'Scanner' 객체를 생성한다.

        // 'do-while' 반복문: 인원수를 1부터 100 사이로 제한하기 위한 유효성 검사다.
        // 'do' 블록 안의 코드를 먼저 한 번 실행하고, 'while' 조건이 참이면 계속 반복한다.
	    do {
		    System.out.print("인원수 입력(1 ~ 100): "); // 인원수 입력을 안내한다.
		    inwon = sc.nextInt(); // 사용자가 입력한 정수(인원수)를 읽어와 'inwon' 변수에 저장한다.
	    } while(inwon < 1 || inwon > 100); // 'inwon'이 1보다 작거나 100보다 크면(즉, 유효하지 않은 범위이면) 반복한다.

	    /*
	      'Record' 클래스의 배열 변수 're'를 'inwon'만큼의 크기로 생성하는 부분이다.
	      중요: 'new Record[inwon]'은 'Record' 객체들을 담을 수 있는 '공간'만 만든 것이지,
	      각 공간에 'Record' 객체 자체를 생성하여 채워 넣은 것은 아니다.
	      각 'Record' 객체의 생성(인스턴스화)은 'input()' 메소드에서 별도로 이루어진다! (존나 중요!)
	     */
		
	    re = new Record[inwon];
	    // sc.close(); // (참고) 보통 main에서 Scanner를 한 번만 생성하고 메소드에 전달하거나,
	                 // 클래스 전체의 멤버 변수로 두어 한 번만 닫는 것이 일반적이다.
	                 // 여기서 닫으면 input() 메소드에서 다시 Scanner를 생성해야 한다.
	                 // 여기서는 main에서 스캐너를 닫을 거라 주석 처리함.
	}

	// --- 2. 데이터 입력 및 성적 계산 기능 (`input` 메소드) ---
    // 각 학생의 이름과 국어, 영어, 수학 점수를 입력받고, 동시에 총점과 평균을 계산하여 'Record' 객체에 저장한다.
	public void input() { // 이 메소드는 반환 값이 없다(void).

		Scanner sc = new Scanner(System.in); // 사용자 키보드 입력을 위한 'Scanner' 객체를 생성한다.

		// 과목 점수 입력을 위한 안내 메시지를 배열로 미리 정의한다.
		String[] title = {"국어점수: ", "영어점수: ", "수학점수: "};

		// 'for' 반복문을 사용하여 'inwon' 수만큼의 학생 데이터를 입력받는다.
		for (int i = 0; i < inwon; i++) { // 'i'는 학생의 인덱스를 나타낸다 (0부터 inwon-1까지).

            // 중요: 각 학생마다 새로운 'Record' 객체를 생성(인스턴스화)하여 're' 배열의 'i'번째 칸에 저장한다.
            // 이렇게 해야 각 학생의 이름, 점수, 총점 등을 독립적으로 저장할 수 있다.
			re[i] = new Record(); // ★★★ 각 학생의 Record 객체 생성! ★★★

			System.out.print(i + 1 + "번째 이름: "); // 'i+1'을 사용하여 "1번째 이름: ", "2번째 이름: "과 같이 출력한다.
			re[i].name = sc.next(); // 'i'번째 'Record' 객체의 'name' 필드에 학생 이름을 저장한다.

            // --- 과목별 점수 입력 및 총점 계산 ---
            // 중첩 'for' 반복문을 사용하여 각 학생의 세 과목 점수를 입력받고 총점에 더한다.
			for (int j = 0; j < title.length; j++) { // 'j'는 과목의 인덱스를 나타낸다 (0:국어, 1:영어, 2:수학).
				System.out.print(title[j]); // 'title' 배열을 사용하여 각 과목의 입력 안내 메시지를 출력한다. (예: "국어점수: ")

				// 'i'번째 학생의 'j'번째 과목 점수를 're[i].score[j]'에 저장한다.
				re[i].score[j] = sc.nextInt();

				// 'i'번째 학생의 'sum'에 현재 입력받은 과목 점수를 누적하여 더한다.
				re[i].sum += re[i].score[j]; // 're[i].sum = re[i].sum + re[i].score[j];'와 같다.
			}
            // --- 평균 계산 ---
            // 세 과목 점수의 총점을 3.0으로 나누어 평균을 계산한다.
            // '3.0'으로 나누는 이유는 정수 나누기(int / int)가 아닌 실수 나누기(int / double)를 하여 소수점 아래까지 정확한 평균을 얻기 위함이다.
            // (만약 3으로 나누면 결과가 정수가 되어 소수점 이하가 버려진다.)
			re[i].avg = re[i].sum / 3.0;
		}
		sc.close(); // input 메소드가 끝나면 스캐너 닫기 (메인 메소드에서 닫는다면 이 부분은 제거해도 된다)
	}

	// --- 3. 석차 계산 기능 (`ranking` 메소드) ---
    // 모든 학생들의 평균 점수를 비교하여 석차를 계산하고, 각 'Record' 객체의 'rank' 필드에 저장한다.
	public void ranking() { // 이 메소드는 반환 값이 없다(void).
		int i, j; // 반복문에서 사용할 변수를 선언한다.

        // --- 모든 학생의 석차를 1로 초기화 ---
        // 모든 학생은 일단 1등이라고 가정하고 시작한다. (자기보다 높은 점수가 나올 때마다 등수가 밀림)
	    for (i = 0; i < inwon; i++) // 각 학생에 대해 반복한다.
		    re[i].rank = 1; // 'i'번째 학생의 'rank'를 1로 설정한다.

        // --- 실제 석차 계산 로직 ---
        // 이중 'for' 반복문을 사용하여 모든 학생 쌍을 비교한다.
        // 'i'번째 학생의 평균과 'j'번째 학생의 평균을 비교하여 석차를 조정한다.
	    for (i = 0; i < inwon - 1; i++) { // 첫 번째 학생을 선택한다. (마지막 학생은 비교할 필요 없음)
		    for (j = i + 1; j < inwon; j++) { // 첫 번째 학생(i) 다음 학생부터 마지막 학생까지 비교한다.
                // 'i'번째 학생의 평균이 'j'번째 학생의 평균보다 높으면 (i가 j보다 잘함)
			    if (re[i].avg > re[j].avg) {
				    re[j].rank++; // 'j'번째 학생의 등수를 1 증가시킨다. (j는 i보다 등수가 밀려남)
			    }
                // 'i'번째 학생의 평균이 'j'번째 학생의 평균보다 낮으면 (j가 i보다 잘함)
			    else if (re[i].avg < re[j].avg) {
				    re[i].rank++; // 'i'번째 학생의 등수를 1 증가시킨다. (i는 j보다 등수가 밀려남)
			    }
                // else: 두 학생의 평균이 같으면 (동점) 서로의 석차를 조정하지 않는다.
                //       (이 경우 같은 등수가 여러 명 나올 수 있다.)
		    }
	    }
    }

	// --- 4. 결과 출력 기능 (`print` 메소드) ---
    // 모든 학생의 성적 정보(석차 포함)를 화면에 존나게 깔끔한 표 형태로 출력한다! (이전에 미구현이었던 부분 구현함!)
	public void print() { // 이 메소드는 반환 값이 없다(void).
	    ranking(); // 출력하기 전에 먼저 석차를 정확히 계산한다! (이 메소드가 호출될 때마다 석차를 다시 계산함!)

        // --- 출력 헤더 (표의 맨 위 제목 부분) ---
        System.out.println("\n-------------------------------------------------------------");
        System.out.println("이름\t국어\t영어\t수학\t총점\t평균\t석차");
        System.out.println("-------------------------------------------------------------");

        // --- 각 학생의 성적 정보 출력 ---
        for (int k = 0; k < inwon; k++) {
            System.out.printf("%s\t%d\t%d\t%d\t%d\t%.2f\t%d%n",
                re[k].name,            // 학생 이름
                re[k].score[0],        // 국어 점수
                re[k].score[1],        // 영어 점수
                re[k].score[2],        // 수학 점수
                re[k].sum,             // 총점
                re[k].avg,             // 평균 (소수점 둘째 자리까지)
                re[k].rank);           // 석차
        }
        System.out.println("-------------------------------------------------------------");
    }

    // --- 메인 메소드(main method): 프로그램의 시작점 ---
    // 이 클래스 자체를 독립적으로 실행하기 위한 `main` 메소드를 추가한다!
    public static void main(String[] args) {
        Sung sungProgram = new Sung(); // 'Sung' 클래스의 객체를 생성한다. (성적 관리 프로그램 시작!)

        System.out.println("--- 성적 관리 프로그램 시작 ---");
        
        sungProgram.set();     // 인원수 입력 및 Record 배열 생성
        sungProgram.input();   // 각 학생의 점수 입력 및 총점/평균 계산
        sungProgram.ranking(); // 학생들의 석차 계산
        sungProgram.print();   // 모든 성적 정보 출력
        
        System.out.println("--- 성적 관리 프로그램 종료 ---");
    }

} // Sung 클래스 종료
